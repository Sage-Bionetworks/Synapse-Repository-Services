package org.sagebionetworks.repo.model.dbo.dao;

import java.io.IOException;
import java.lang.reflect.Field;
import java.util.List;
import java.util.Map;

import org.sagebionetworks.repo.model.Annotations;
import org.sagebionetworks.repo.model.DatastoreException;
import org.sagebionetworks.repo.model.NamedAnnotations;
import org.sagebionetworks.repo.model.attachment.AttachmentData;
import org.sagebionetworks.repo.model.jdo.JDOSecondaryPropertyUtils;
import org.sagebionetworks.schema.ObjectSchema;
import org.sagebionetworks.schema.adapter.JSONObjectAdapterException;
import org.sagebionetworks.schema.adapter.org.json.EntityFactory;

public class SchemaSerializationUtils {
	
	@SuppressWarnings("rawtypes")
	public static void mapAnnotationsToDtoFields(byte[] compressedProperties, Object dto, ObjectSchema schema) throws DatastoreException {
		NamedAnnotations properties = null;
		try {
			properties = JDOSecondaryPropertyUtils.decompressedAnnotations(compressedProperties);
		} catch (IOException e) {
			throw new DatastoreException(e);
		}		
		
		Map<String, ObjectSchema> schemaProperties = schema.getProperties();
		Annotations a = properties.getPrimaryAnnotations();
		Map<String, List<String>> stringAnnots = a.getStringAnnotations();
		for (String propertyName : schemaProperties.keySet()) {
			try {
				Field field = dto.getClass().getDeclaredField(propertyName);
				field.setAccessible(true);
				Class fieldType = field.getType();
				if (!(fieldType.equals(String.class) || fieldType.equals(AttachmentData.class))) {
					continue; // Skip fields that are not supported
				}
				List<String> values = stringAnnots.get(propertyName);
				if (values!=null && values.size()>0) {
					if (fieldType.equals(AttachmentData.class))
					{
						String json = values.get(0);
						AttachmentData data = null;
						if (json != null && json.length()>0)
							data = EntityFactory.createEntityFromJSONString(json, AttachmentData.class);
						field.set(dto, data);
					}
					else //String
						field.set(dto, values.get(0));
				}
			} catch (NoSuchFieldException e) {
				// since the object is generated by the schema, this should never happen
				throw new RuntimeException(e);
			} catch (IllegalAccessException e) {
				throw new RuntimeException(e);
			} catch (JSONObjectAdapterException e) {
				throw new RuntimeException(e);
			}			
		}
	}


}
