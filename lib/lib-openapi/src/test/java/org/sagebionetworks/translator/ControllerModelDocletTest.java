package org.sagebionetworks.translator;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.File;
import java.io.InputStream;
import java.net.URL;
import java.nio.charset.StandardCharsets;

import javax.tools.DocumentationTool;
import javax.tools.ToolProvider;

import org.apache.commons.io.IOUtils;
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

public class ControllerModelDocletTest {
	private static File sampleSourceFile;
	private static File classpathFile;
	private static File outputDirectory;
	
	private static File findFileOnClasspath(String fileName){
		URL url = ControllerModelDocletTest.class.getClassLoader().getResource(fileName);
		assertNotNull(url, "Failed to find: " + fileName + " on the classpath");
		File file = new File(url.getFile().replaceAll("%20", " "));
		assertTrue(file.exists());
		return file;
	}
	
	@BeforeAll
	public static void before() throws Exception{
		// Lookup the test files.
		sampleSourceFile = findFileOnClasspath("controller/BasicExampleController.java");
		// Find the classpath file generated by the maven-dependency-plugin
		String propertyValue = System.getProperty("auto.generated.classpath");
		if(propertyValue == null){
			// this occurs when run in eclipse.
			propertyValue = "target/gen/auto-generated-classpath.txt";
		}
		classpathFile = new File(propertyValue);
		assertTrue(classpathFile.exists(), "Classpath files does not exist: " + classpathFile.getAbsolutePath());
		// Lookup the output directory.
		propertyValue = System.getProperty("test.javadoc.output.directory");
		if(propertyValue == null){
			// this occurs when run in eclipse.
			propertyValue = "target/test-classes";
		}
		outputDirectory = new File(propertyValue);
	}

	@Test
	public void testDoclet() throws Exception {
		final String serverSideFactoryPath = "org.sagebionetworks.openapi.server.ServerSideOnlyFactory";
		final String controllersPackageName = "controller";
		final String targetFilePath = outputDirectory + "/GeneratedOpenAPISpec.json";
		
		String[] docletArgs = new String[] {
			"-doclet", ControllerModelDoclet.class.getName(),
			"-docletpath", "@" + classpathFile.getAbsolutePath(),
			"-sourcepath", sampleSourceFile.getParentFile().getParent(),
			"--target-file", targetFilePath,
			"--factory-path", serverSideFactoryPath,
			"--should-run", "true",
			controllersPackageName
		};
		
		for (int i = 0; i < docletArgs.length - 1; i += 2) {
			System.out.println(docletArgs[i] + "  " + docletArgs[i + 1]);
		}
		System.out.println(docletArgs[docletArgs.length - 1]);

		DocumentationTool docTool = ToolProvider.getSystemDocumentationTool();
		docTool.run(System.in, System.out, System.err, docletArgs);
				
		ClassLoader classLoader = ControllerModelDocletTest.class.getClassLoader();
		
		JSONObject expectedJson;
		JSONObject generatedJson;
		
		// get the resulting json generated
		try (InputStream expectedIs = classLoader.getResourceAsStream("ExpectedOpenApiSpec.json");
			 InputStream generatedIs = classLoader.getResourceAsStream("GeneratedOpenAPISpec.json");) {			
			expectedJson = new JSONObject(IOUtils.toString(expectedIs, StandardCharsets.UTF_8));
			generatedJson = new JSONObject(IOUtils.toString(generatedIs, StandardCharsets.UTF_8));

		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		
		System.out.println("Generated open api spec: ");
		System.out.println(generatedJson.toString(2));
				
		assertEquals(expectedJson.toString(2), generatedJson.toString(2));
	}
	
}