package org.sagebionetworks.translator;

import static org.junit.Assert.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.File;
import java.io.InputStream;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Set;

import javax.tools.DocumentationTool;
import javax.tools.ToolProvider;

import org.apache.commons.io.IOUtils;
import org.json.JSONArray;
import org.json.JSONObject;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

public class ControllerModelDocletTest {
	private static File sampleSourceFile;
	private static File classpathFile;
	private static File outputDirectory;
	private static JSONObject generatedOpenAPISpec;
	
	private static File findFileOnClasspath(String fileName){
		URL url = ControllerModelDocletTest.class.getClassLoader().getResource(fileName);
		assertNotNull(url, "Failed to find: " + fileName + " on the classpath");
		File file = new File(url.getFile().replaceAll("%20", " "));
		assertTrue(file.exists());
		return file;
	}
	
	@BeforeAll
	public static void before() throws Exception{
		// Lookup the test files.
		sampleSourceFile = findFileOnClasspath("controller/BasicExampleController.java");
		// Find the classpath file generated by the maven-dependency-plugin
		String propertyValue = System.getProperty("auto.generated.classpath");
		if(propertyValue == null){
			// this occurs when run in eclipse.
			propertyValue = "target/gen/auto-generated-classpath.txt";
		}
		classpathFile = new File(propertyValue);
		assertTrue(classpathFile.exists(), "Classpath files does not exist: " + classpathFile.getAbsolutePath());
		// Lookup the output directory.
		propertyValue = System.getProperty("test.javadoc.output.directory");
		if(propertyValue == null){
			// this occurs when run in eclipse.
			propertyValue = "target/test-classes";
		}
		outputDirectory = new File(propertyValue);
		
		// invoke the doclet
		startDoclet();
	}

	public static void startDoclet() throws Exception {
		final String serverSideFactoryPath = "org.sagebionetworks.openapi.server.ServerSideOnlyFactory";
		final String controllersPackageName = "controller";
		final String targetFilePath = outputDirectory + "/GeneratedOpenAPISpec.json";
		
		String[] docletArgs = new String[] {
			"-doclet", ControllerModelDoclet.class.getName(),
			"-docletpath", "@" + classpathFile.getAbsolutePath(),
			"-sourcepath", sampleSourceFile.getParentFile().getParent(),
			"--target-file", targetFilePath,
			"--factory-path", serverSideFactoryPath,
			controllersPackageName
		};
		
		for (int i = 0; i < docletArgs.length - 1; i += 2) {
			System.out.println(docletArgs[i] + "  " + docletArgs[i + 1]);
		}
		System.out.println(docletArgs[docletArgs.length - 1]);

		DocumentationTool docTool = ToolProvider.getSystemDocumentationTool();
		docTool.run(System.in, System.out, System.err, docletArgs);
		
		// get the resulting json generated
		try (InputStream is = ControllerModelDoclet.class.getClassLoader().getResourceAsStream("GeneratedOpenAPISpec.json")) {
			assertNotNull(is);
			String jsonTxt = IOUtils.toString(is, StandardCharsets.UTF_8);
			generatedOpenAPISpec = new JSONObject(jsonTxt);
			System.out.println("generated open api spec " + generatedOpenAPISpec.toString(5));
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	@Test
	public void testComplexPetsControllerExists() {
		JSONArray array = generatedOpenAPISpec.getJSONArray("tags");
		boolean foundComplexPetsTag = false;
		for (int i = 0; i < array.length(); i++) {
			JSONObject obj = array.getJSONObject(i);
			String controllerName = obj.get("name").toString();
			String controllerDescription = obj.get("description").toString();
			if (controllerName.equals("ComplexPets")) {
				foundComplexPetsTag = true;
				assertEquals("This controller is used to test translating for complex types.", controllerDescription);
			}
		}
		assertTrue(foundComplexPetsTag);
	}
	
	@Test
	public void testTagsIsCorrectInPath() {
		JSONObject pathsObj = generatedOpenAPISpec.getJSONObject("paths");
		JSONObject pathObj = pathsObj.getJSONObject("/repo/v1/complex-pet/{petName}");
		JSONObject operationObj = pathObj.getJSONObject("get");
		
		// test tags is correct
		JSONArray tags = operationObj.getJSONArray("tags");
		boolean foundComplexPetsTag = false;
		for (int i = 0; i < tags.length(); i++) {
			String tag = tags.getString(i);
			if (tag.equals("ComplexPets")) {
				foundComplexPetsTag = true;
			}
		}
		assertTrue(foundComplexPetsTag);
	}
	
	@Test
	public void testOperationIdIsCorrectInPath() {
		JSONObject pathsObj = generatedOpenAPISpec.getJSONObject("paths");
		JSONObject pathObj = pathsObj.getJSONObject("/repo/v1/complex-pet/{petName}");
		JSONObject operationObj = pathObj.getJSONObject("get");
		
		// test operationId is correct
		assertEquals("getPet", operationObj.getString("operationId"));
	}
	
	@Test
	public void testParametersAreCorrectInPath() {
		JSONObject pathsObj = generatedOpenAPISpec.getJSONObject("paths");
		JSONObject pathObj = pathsObj.getJSONObject("/repo/v1/complex-pet/{petName}");
		JSONObject operationObj = pathObj.getJSONObject("get");
		
		// test parameters are correct
		JSONArray parameters = operationObj.getJSONArray("parameters");
		boolean foundPetNameParam = false;
		for (int i = 0; i < parameters.length(); i++) {
			JSONObject param = parameters.getJSONObject(i);
			if (param.getString("name").equals("petName")) {
				assertEquals("path", param.getString("in"));
				assertEquals(true, param.getBoolean("required"));
				JSONObject schema = param.getJSONObject("schema");
				assertEquals("#/components/schemas/java.lang.String", schema.getString("$ref"));
				foundPetNameParam = true;
			}
		}
		assertTrue(foundPetNameParam);
	}
	
	@Test
	public void testResponseObjectIsCorrectInPath() {
		JSONObject pathsObj = generatedOpenAPISpec.getJSONObject("paths");
		JSONObject pathObj = pathsObj.getJSONObject("/repo/v1/complex-pet/{petName}");
		JSONObject operationObj = pathObj.getJSONObject("get");
		
		// test response object is correct
		JSONObject response = operationObj.getJSONObject("responses");
		JSONObject responseStatusCode = response.getJSONObject("200");
		assertEquals("the Pet associated with 'name'.", responseStatusCode.getString("description"));
		JSONObject content = responseStatusCode.getJSONObject("content");
		JSONObject contentType = content.getJSONObject("application/json");
		JSONObject responseSchema = contentType.getJSONObject("schema");

		// test to see if Pet interface is represented correctly as the return type.
		assertEquals("#/components/schemas/org.sagebionetworks.openapi.pet.Pet", responseSchema.getString("$ref"));
	}
	
	@Test
	public void testRequestBodyIsCorrectInPath() {
		JSONObject pathsObj = generatedOpenAPISpec.getJSONObject("paths");
		JSONObject pathObj = pathsObj.getJSONObject("/repo/v1/complex-pet/cat/{name}");
		JSONObject operationObj = pathObj.getJSONObject("post");

		JSONObject requestBody = operationObj.getJSONObject("requestBody");
		assertEquals(true, requestBody.getBoolean("required"));
		JSONObject content = requestBody.getJSONObject("content");
		JSONObject contentType = content.getJSONObject("application/json");
		JSONObject schema = contentType.getJSONObject("schema");
		
		assertEquals("#/components/schemas/org.sagebionetworks.openapi.pet.Cat", schema.getString("$ref"));
	}
	
	@Test
	public void testSchemasGeneratedCorrectlyInComponents() {
		JSONObject componentsObj = generatedOpenAPISpec.getJSONObject("components");
		JSONObject schemasObj = componentsObj.getJSONObject("schemas");
		JSONObject petInterface = schemasObj.getJSONObject("org.sagebionetworks.openapi.pet.Pet");
		
		assertEquals("object", petInterface.getString("type"));
		assertEquals("This interface represents a pet.", petInterface.getString("description"));
		JSONObject petInterfaceProperties = petInterface.getJSONObject("properties");
		JSONObject petInterfaceNameProperty = petInterfaceProperties.getJSONObject("name");
		assertEquals("string", petInterfaceNameProperty.getString("type"));
		JSONObject responseSchemaHasTailProperty = petInterfaceProperties.getJSONObject("hasTail");
		assertEquals("boolean", responseSchemaHasTailProperty.getString("type"));
		
		// test to see if the oneof property is being set correctly.
		JSONArray oneOf = petInterface.getJSONArray("oneOf");
		assertTrue(oneOf.length() == 3);
		Set<String> references = new HashSet<>();
		for (int i = 0; i < oneOf.length(); i++) {
			JSONObject reference = oneOf.getJSONObject(i);
			String ref = reference.getString("$ref");
			references.add(ref);
		}
		assertTrue(references.contains("#/components/schemas/org.sagebionetworks.openapi.pet.Husky"));
		assertTrue(references.contains("#/components/schemas/org.sagebionetworks.openapi.pet.Poodle"));
		assertTrue(references.contains("#/components/schemas/org.sagebionetworks.openapi.pet.Cat"));
	}
	
	@Test
	public void testComplexTypesInPropertiesAreGeneratedAsReferences() {
		JSONObject componentsObj = generatedOpenAPISpec.getJSONObject("components");
		JSONObject schemasObj = componentsObj.getJSONObject("schemas");
		JSONObject poodleObj = schemasObj.getJSONObject("org.sagebionetworks.openapi.pet.Poodle");
		JSONObject propertiesObj = poodleObj.getJSONObject("properties");
		JSONObject ownerProperty = propertiesObj.getJSONObject("owner");
		
		// Should be a reference to the place the complex type lives in the "components" section
		assertEquals("#/components/schemas/org.sagebionetworks.openapi.pet.Owner", ownerProperty.getString("$ref"));
	}
}