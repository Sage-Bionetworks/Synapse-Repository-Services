package org.sagebionetworks.javadoc.web.services;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.stream.Stream;

import javax.tools.DocumentationTool;
import javax.tools.ToolProvider;

import org.apache.commons.io.FileUtils;
import org.junit.Before;
import org.junit.Test;

/**
 * Test for the SpringMVCDoclet
 * 
 * @author jmhill
 *
 */
public class SpringMVCDocletTest {

	File sampleSourceFile;
	File classpathFile;
	File outputDirectory;

	@Before
	public void before() {
		// Lookup the test files.
		sampleSourceFile = findFileOnClasspath("controller/ExampleController.java");
		// Find the classpath file generated by the maven-dependency-plugin
		String propertyValue = System.getProperty("auto.generated.classpath");
		if (propertyValue == null) {
			// this occurs when run in eclipse.
			propertyValue = "target/gen/auto-generated-classpath.txt";
		}
		System.out.println(propertyValue);
		classpathFile = new File(propertyValue);
		assertTrue(classpathFile.exists(), "Classpath files does not exist: " + classpathFile.getAbsolutePath());
		// Lookup the output directory.
		propertyValue = System.getProperty("test.javadoc.output.directory");
		if (propertyValue == null) {
			// this occurs when run in eclipse.
			propertyValue = "target/javadoc";
		}
		outputDirectory = new File(propertyValue);
	}

	public static File findFileOnClasspath(String fileName) {
		URL url = SpringMVCDocletTest.class.getClassLoader().getResource(fileName);
		assertNotNull(url, "Failed to find: " + fileName + " on the classpath");
		File file = new File(url.getFile().replaceAll("%20", " "));
		assertTrue(file.exists());
		return file;
	}

	@Test
	public void testDoclet() throws Exception {
		final String controllersPackageName = "controller";

		String[] docletArgs = new String[] { "-authControllerName", "controller.ExampleController", "-d",
				outputDirectory.getAbsolutePath(), "-doclet", SpringMVCDoclet.class.getName(), "-docletpath",
				"@" + classpathFile.getAbsolutePath(), "-sourcepath", sampleSourceFile.getParentFile().getParent(),
				controllersPackageName };

		for (int i = 0; i < docletArgs.length - 1; i += 2) {
			System.out.println(docletArgs[i] + "  " + docletArgs[i + 1]);
		}
		System.out.println(docletArgs[docletArgs.length - 1]);

		DocumentationTool docTool = ToolProvider.getSystemDocumentationTool();
		int result = docTool.run(System.in, System.out, System.err, docletArgs);
		assertEquals(0, result, "Doclet run failed.");

		File resultDir = new File(
				new File(SpringMVCDocletTest.class.getProtectionDomain().getCodeSource().getLocation().getFile())
						.getParent(),
				"javadoc");
		File expectedDir = new File(findFileOnClasspath("expected/javadoc/index.html").getParent());
		compareExpectedToResults(expectedDir.toPath(), resultDir.toPath());
	}

	/**
	 * Compare the full directory of all of the expected files with the results
	 * files and assert that results files match the expected files.
	 * 
	 * @param expectedDir
	 * @param resultDir
	 * @throws IOException
	 */
	public static void compareExpectedToResults(Path expectedDir, Path resultDir) throws IOException {
		System.out.println("expected: " + expectedDir.toString());
		System.out.println("results: " + resultDir.toString());
		try (Stream<Path> stream = Files.walk(expectedDir, 10)) {
			stream.filter(p->p.toFile().isFile()).forEach(p -> {
				try {
					// does the the corresponding result file exist.
					File resultFile = new File(resultDir.toFile(), expectedDir.relativize(p).toString());
					System.out.println("comparing: "+p.toAbsolutePath());
					System.out.println("to: "+resultFile.getAbsolutePath());
					assertTrue(resultFile.exists(), "Result file does not exist: " + resultFile);
					String expected = FileUtils.readFileToString(p.toFile(), "UTF-8").replaceAll("\\s", "");
					String results = FileUtils.readFileToString(resultFile, "UTF-8").replaceAll("\\s", "");
					if(!expected.equals(results)) {
						StringBuilder expectedBuffer = new StringBuilder("expected:\n");
						StringBuilder resultBuffer = new StringBuilder("result:\n");
						for(int i=0; i<expected.length(); i++) {
							if(results.length() > i && expectedBuffer.length() < 500) {
								char e = expected.charAt(i);
								char r = results.charAt(i);
								if(e != r) {
									expectedBuffer.append(e);
									resultBuffer.append(r);
								}
							}
						}
						System.out.println(expectedBuffer);
						System.out.println("------------------");
						System.out.println(resultBuffer);
					}
					assertEquals(expected, results);
				} catch (IOException e) {
					throw new RuntimeException(e);
				}
			});
		}
	}
}
