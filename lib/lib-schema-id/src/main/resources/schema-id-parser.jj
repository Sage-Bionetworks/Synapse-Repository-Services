options{
STATIC = false;
}
/* *** Specification of the parser class *** */
PARSER_BEGIN(SchemaIdParser)
package org.sagebionetworks.schema.parser;
import java.io.StringReader;

import org.sagebionetworks.schema.id.DotSeparatedAlphaNumeric;
import org.sagebionetworks.schema.id.OrganizationName;
import org.sagebionetworks.schema.id.SchemaId;
import org.sagebionetworks.schema.id.SchemaName;
import org.sagebionetworks.schema.semantic.version.AlphanumericIdentifier;
import org.sagebionetworks.schema.semantic.version.Build;
import org.sagebionetworks.schema.semantic.version.BuildIdentifier;
import org.sagebionetworks.schema.semantic.version.NumericIdentifier;
import org.sagebionetworks.schema.semantic.version.Prerelease;
import org.sagebionetworks.schema.semantic.version.PrereleaseIdentifier;
import org.sagebionetworks.schema.semantic.version.SemanticVersion;
import org.sagebionetworks.schema.semantic.version.VersionCore;

public class SchemaIdParser {

	public SchemaIdParser(String input){
		this(new StringReader(input));
	}
	
	/**
	 * Parse an $id string into a SchemaId object.
	 * 
	 * @param id
	 * @throws IllegalArgumentException that wraps any ParseException
	 * @return
	 */
	public static SchemaId parseSchemaId(String id) {
		if(id == null) {
			throw new IllegalArgumentException("$id cannot be null");
		}
		SchemaIdParser parser = new SchemaIdParser(extractRelative$id(id));
		try {
			return parser.schemaId();
		} catch (ParseException e) {
			throw new IllegalArgumentException("Invalid '$id' : '" + id + "'\n" + e.getMessage(), e);
		}
	}
	
		/**
	 * If the passed $id is absolute then it will be converted to relative.
	 * If the passed $id is already relative then it will be returned unmodified.
	 * 
	 * @param id
	 * @return
	 */
	public static String extractRelative$id(String id) {
		if(id == null) {
			return null;
		}
		int lastSlashIndex = id.lastIndexOf("/");
		if(lastSlashIndex > 0) {
			return id.substring(lastSlashIndex+1);
		}else {
			return id;
		}
	}
	
	/**
	 * Parse an organization name into an OrganizationName object.
	 * @param organizationName
	 * @return
	 */
	public static OrganizationName parseOrganizationName(String organizationName) {
		if(organizationName == null) {
			throw new IllegalArgumentException("Organization name cannot be null");
		}
		SchemaIdParser parser = new SchemaIdParser(organizationName);
		try {
			return parser.organizationNameTerminal();
		} catch (ParseException e) {
			throw new IllegalArgumentException("Invalid 'organizationName' : '" + organizationName + "'\n" + e.getMessage(), e);
		}
	}

}

PARSER_END(SchemaIdParser)

/* Skip whitespace */
SKIP : /* WHITE SPACE */
{ 
  " "
| "\t"
| "\r"
| "\f"
| "\n"
| < LOW_SPECIAL_ASCII: (["\u0000"-"\u001f"]) >
| < HIGH_SPECIAL_ASCII: (["\u007f"-"\uffff"]) >
}

/* tokens */
TOKEN:{
< zero : "0" >
| < positive_digit: ["1"-"9"]>
| < dot: ".">
| < letter: ["a"-"z","A"-"Z"]>
| < dash: "-">
| < plus: "+">
| < slash: "/" >
}

VersionCore versionCore():
{
	NumericIdentifier major = null;
	NumericIdentifier minor = null;
	NumericIdentifier patch = null;
}
{
	major = numericIdentifier() "." minor = numericIdentifier() "." patch = numericIdentifier()
	{ return new VersionCore(major, minor, patch); }
}

NumericIdentifier numericIdentifier():
{
	Token token = null;
	StringBuilder builder = new StringBuilder();
}
{
	token = <zero> { return new NumericIdentifier(new Long(0L)); }
| 	positiveDigit(builder) [ digits(builder) ] 
 { return new NumericIdentifier(new Long(builder.toString())); }
}
void positiveDigit(StringBuilder builder):
{
	Token token = null;
}
{
	token = <positive_digit> { builder.append(token.image);}
}
void digit(StringBuilder builder):
{
	Token token = null;
}
{
	token = <zero> { builder.append(token.image);}
| 	positiveDigit(builder)
}
void digits(StringBuilder builder):
{
	Token token = null;
}
{
	digit(builder) (digit(builder))*
}
void nonDigit(StringBuilder builder):
{
	Token token = null;
}
{
	token = <letter> { builder.append(token.image);}
}
void identifierCharacter(StringBuilder builder):
{}
{
	digit(builder)
| 	nonDigit(builder)
}
void identifierCharacters(StringBuilder builder):
{}
{
	identifierCharacter(builder) (identifierCharacter(builder))*
}
AlphanumericIdentifier alphanumericIdentifier():
{
	StringBuilder builder = new StringBuilder();
}
{
	nonDigit(builder) [ identifierCharacters(builder) ]  { return new AlphanumericIdentifier(builder.toString()); }
}
PrereleaseIdentifier prereleaseIdentifier():
{
	AlphanumericIdentifier alphanumericIdentifier = null;
	NumericIdentifier numericIdentifier = null;
}
{
	numericIdentifier = numericIdentifier() { return new PrereleaseIdentifier(numericIdentifier); }
|	alphanumericIdentifier = alphanumericIdentifier() { return new PrereleaseIdentifier(alphanumericIdentifier); }	
}
Prerelease prerelease():
{
	Prerelease prerelease = new Prerelease();
	PrereleaseIdentifier prereleaseIdentifier = null;
}
{
	prereleaseIdentifier = prereleaseIdentifier() { prerelease.add(prereleaseIdentifier); }
	(
		<dot> prereleaseIdentifier = prereleaseIdentifier() { prerelease.add(prereleaseIdentifier); }
	)*
	{ return prerelease; }
}
BuildIdentifier buildIdentifier():
{
	StringBuilder builder = new StringBuilder();
}
{
	identifierCharacters(builder)
	 { return new BuildIdentifier(builder.toString()); }
}
Build build():
{
	Build build = new Build();
	BuildIdentifier buildIdentifier = null;
}
{
	buildIdentifier = buildIdentifier() { build.add(buildIdentifier); }
	(
	 <dot> 	buildIdentifier = buildIdentifier() { build.add(buildIdentifier); }
	)*
	{ return build; }
}
SemanticVersion semanticVersion():
{
	VersionCore versionCore = null;
	Prerelease prerelease = null;
	Build build = null;
}
{
	versionCore = versionCore() [ <dash> prerelease = prerelease()  ] [ <plus> build = build() ]
	{ return new SemanticVersion(versionCore, prerelease, build); }
}
DotSeparatedAlphaNumeric dotSeparatedAlphaNumeric():
{
	DotSeparatedAlphaNumeric dotSeparatedAlphaNumeric = new DotSeparatedAlphaNumeric();
	AlphanumericIdentifier alphanumericIdentifier = null;
}
{
	alphanumericIdentifier = alphanumericIdentifier() { dotSeparatedAlphaNumeric.add(alphanumericIdentifier); }
	(
		<dot> alphanumericIdentifier = alphanumericIdentifier() { dotSeparatedAlphaNumeric.add(alphanumericIdentifier); }
	)*
	{ return dotSeparatedAlphaNumeric; }
}
OrganizationName organizationName():
{
	DotSeparatedAlphaNumeric dotSeparatedAlphaNumeric = null;
}
{
	dotSeparatedAlphaNumeric = dotSeparatedAlphaNumeric()
	{ return new OrganizationName(dotSeparatedAlphaNumeric); }
}
OrganizationName organizationNameTerminal():
{
	OrganizationName organizationName = null;
}
{
	organizationName = organizationName() <EOF>
	{ return organizationName; }
}
SchemaName schemaName():
{
	DotSeparatedAlphaNumeric dotSeparatedAlphaNumeric = null;
}
{
	dotSeparatedAlphaNumeric = dotSeparatedAlphaNumeric()
	{ return new SchemaName(dotSeparatedAlphaNumeric); }
}
SchemaId schemaId():
{
	OrganizationName organizationName = null;
	SchemaName schemaName = null;
	SemanticVersion semanticVersion = null;
}
{
	organizationName = organizationName() <dash> schemaName = schemaName() [ <dash> semanticVersion = semanticVersion() ] <EOF>
	{ return new SchemaId(organizationName, schemaName, semanticVersion); }
}
