/* The BNF for this parser was derived from: https://github.com/ronsavage/SQL/blob/master/sql-92.bnf (SQL-92) 
* https://javacc.java.net/doc/docindex.html
* The BNF can be viewed with UMLet file in this same directory: SQL92BNF.uxf
* To debug changes to this file run:
* mvn clean generate-sources
*/
options{
STATIC = false;
}
/* *** Specification of the parser class *** */
PARSER_BEGIN(TableQueryParser)
package org.sagebionetworks.table.query;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.List;

import org.sagebionetworks.table.query.model.*;

public class TableQueryParser {

	public TableQueryParser(String input){
		this(new StringReader(input));
	}

	/**
	 * Parse the passed query string into a TableQueryModel
	 * 
	 * @param query
	 * @return
	 * @throws ParseException
	 */
	public static QuerySpecification parserQuery(String query)
			throws ParseException {
		TableQueryParser parser = new TableQueryParser(new StringReader(query));
		return parser.querySpecification();
	}
}

PARSER_END(TableQueryParser)

/**
* When in the DEFAULT state, double quotes are the start of
* string containing non-double quotes. This involves a state
* change to: within_double_quote.  The state change is necessary
* to limit the scope of the <not_double_quote> token which is too broad
* for other cases.
*/
<DEFAULT> TOKEN: 
{
	< start_double_quote: "\""> : within_double_quote
}
// This token only has meaning within a double quote.
<within_double_quote> TOKEN :
{
	< not_double_quote: ~["\""]> : within_double_quote
}
// This token only has meaning within a double quote.
<within_double_quote> TOKEN :
{
	< escape_double_quote: "\"\"" > : within_double_quote
}
/**
* While within a double quote string, another double
* quote will terminate the string and restore the state
* to DEFAULT.
*/
<within_double_quote> TOKEN :
{
	< end_double_quote: "\"">: DEFAULT
}

/**
* When in the DEFAULT state, backtick quotes are the start of
* string containing non-backtick quotes. This involves a state
* change to: within_backtick.  The state change is necessary
* to limit the scope of the <not_backtick> token which is too broad
* for other cases.
*/
<DEFAULT> TOKEN: 
{
	< start_backtick: "`"> : within_backtick
}
// This token only has meaning within a backtick quote.
<within_backtick> TOKEN :
{
	< not_backtick: ~["`"]> : within_backtick
}
// This token only has meaning within a double quote.
<within_backtick> TOKEN :
{
	< escape_backtick: "``" > : within_backtick
}
/**
* While within a double quote string, another double
* quote will terminate the string and restore the state
* to DEFAULT.
*/
<within_backtick> TOKEN :
{
	< end_backtick: "`">: DEFAULT
}

/**
* When in the DEFAULT state, single quotes are the start of
* string containing non-quotes. This involves a state
* change to: within_single_quotes.  The state change is necessary
* to limit the scope of the <not_quote> token which is too broad
* for other cases.
*/
<DEFAULT> TOKEN: 
{
	< start_single_quote: "'"> : within_single_quotes
}
// This token only has meaning within single quotes.
<within_single_quotes> TOKEN :
{
	< not_single_quote: ~["'"]> : within_single_quotes
}
// This token only has meaning within single quotes.
<within_single_quotes> TOKEN :
{
	< escape_single_quote: "''" > : within_single_quotes
}
/**
* While within single quote string, another single
* quote will terminate the string and restore the state
* to DEFAULT.
*/
<within_single_quotes> TOKEN :
{
	< end_single_quote: "'" > : DEFAULT
}

/* Skip whitespace */
SKIP : /* WHITE SPACE */
{ 
  " "
| "\t"
| "\r"
| "\f"
| "\n"
| < LOW_SPECIAL_ASCII: (["\u0000"-"\u001f"]) >
| < HIGH_SPECIAL_ASCII: (["\u007f"-"\u00ff"]) >
}

/* Numeric tokens */
TOKEN:{
 < unsigned_integer: ["0"-"9"](["0"-"9"])*>
| < exact_numeric_literal: (<unsigned_integer> ( <period> ( <unsigned_integer> )? )?) | (<period> <unsigned_integer>) >
| < approximate_numeric_literal:  <exact_numeric_literal> ["e","E"] (["+","-"])? <unsigned_integer> >
}

/* Function tokens */
TOKEN:{
 < count_asterisk: ("count"|"COUNT")"(*)" >
}


/* Reserved words */
TOKEN [IGNORE_CASE]: {
  < all: "ALL">
| < and: "AND">
| < asc: "ASC">
| < as: "AS">
| < between: "BETWEEN" >
| < desc: "DESC" >
| < distinct: "DISTINCT">
| < default_specification: "DEFAULT" > 
| < escape: "ESCAPE">
| < _false: "FALSE">
| < from: "FROM">
| < group_by : "GROUP BY">
| < interval: "INTERVAL">
| < in: "IN">
| < has: "HAS">
| < is: "IS">
| < like: "LIKE" >
| < limit: "LIMIT" >
| < not: "NOT" >
| < null_specification: "NULL" >
| < offset: "OFFSET" >
| < or: "OR" >
| < order_by: "ORDER BY" >
| < select: "SELECT" >
| < time: "TIME" >
| < timestamp: "TIMESTAMP">
| < _true: "TRUE">
| < where: "WHERE">
| < unknown: "UNKNOWN">
| < is_nan: "ISNAN">
| < is_infinity: "ISINFINITY">
| < separator: "SEPARATOR">
}

/* Aggregate functions */
TOKEN [IGNORE_CASE]: {
  < aggregate_functions_name:
   "AVG"
   | "COUNT"
   | "MIN"
   | "MAX"
   | "SUM"
   | "BIT_AND"
   | "BIT_OR"
   | "BIT_XOR"
   | "STD"
   | "STDDEV"
   | "STDDEV_POP"
   | "STDDEV_SAMP"
   | "VAR_POP"
   | "VAR_SAMP"
   | "VARIANCE"
   | "GROUP_CONCAT"
  >
}

/* date and time functions */
TOKEN [IGNORE_CASE]: {
  < date_time_function_name:
   "CURRENT_TIMESTAMP"
   | "CURRENT_DATE"
   | "CURRENT_TIME"
   | "NOW"
   | "UNIX_TIMESTAMP"
   | "FROM_UNIXTIME"
   | "YEARWEEK"
   | "DATE"
   | "DAYNAME"
   | "DAYOFYEAR"
   | "DAYOFMONTH"
   | "DAYOFWEEK"
   | "MONTHNAME"
   | "WEEKOFYEAR"
  >
}

/* string functions */
TOKEN [IGNORE_CASE]: {
  < string_function_name:
   "CONCAT"
   | "REPLACE"
   | "UPPER"
   | "LOWER"
   | "TRIM" 
  >
}

/* date time field */
TOKEN [IGNORE_CASE]: {
	< date_time_field:
	"MICROSECOND"
	| "SECOND"
	| "MINUTE"
	| "HOUR"
	| "DAY"
	| "WEEK"
	| "MONTH"
	| "QUARTER"
	| "YEAR"
	>
}
/* Arithmetic operators */
TOKEN [IGNORE_CASE]:{
  < asterisk: "*">
| < minus_sign: "-">
| < not_equals_operator: "<>">
| < equals_operator: "=">
| < less_than_or_equals_operator: "<=">
| < greater_than_or_equals_operator: ">=">
| < less_than_operator: "<">
| < greater_than_operator: ">">
| < plus_sign: "+">
| < solidus: "/">
| < modulo: "%">
| < div: "DIV">
}

TOKEN [IGNORE_CASE]: {
  < entity_id: "syn"(["0"-"9"])+("."(["0"-"9"])+)?>
}

TOKEN [IGNORE_CASE]: {
  < regular_identifier: ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","0"-"9","_"])*>
}

/* Symbols and punctuation */
TOKEN [IGNORE_CASE]:{
  < comma: ",">
| < left_paren: "(">
| < period: "." >
| < right_paren: ")">
| < underscore: "_">
}

TOKEN: {
  < digit: ["0"-"9"]>
| < letter: ["a"-"z","A"-"Z"]>
}

/* Invalid symbols */
TOKEN: {
  < exclamation_mark: "!">
| < pound_sign: "#">
| < dollar_sign: "$">
| < ampersand: "&">
| < colon: ":">
| < semicolon: ";">
| < question_mark: "?">
| < at_sign: "@">
| < left_bracket: "[">
| < backslash: "\\">
| < right_bracket: "]">
| < circumflex: "^">
| < left_curly_brace: "{">
| < vertical_line: "|">
| < right_curly_brace: "}">
| < tilde: "~">
}
EntityId entityId():
{
	Token token = null;
}
{
	token = <entity_id> { return new EntityId(token.image); }
}
RegularIdentifier regularIdentifier():
{
	Token token = null;
}
{
	token = <regular_identifier> { return new RegularIdentifier(token.image); }
}
UnsignedInteger unsignedInteger():
{
	Token token = null;
}
{
	token = <unsigned_integer> { return new UnsignedInteger(token.image); }
}
ExactNumericLiteral exactNumericLiteral():
{
	Token token = null;
}
{
	token = <unsigned_integer> { return new ExactNumericLiteral(new Long(token.image)); }
	| token = <exact_numeric_literal> { return new ExactNumericLiteral(new Double(token.image)); }
}
ApproximateNumericLiteral approximateNumericLiteral():
{
	Token token = null;
}
{
	token = <approximate_numeric_literal> { return new ApproximateNumericLiteral(token.image); }
}
UnsignedNumericLiteral unsignedNumericLiteral():
{
	ExactNumericLiteral exactNumericLiteral = null;
	ApproximateNumericLiteral approximateNumericLiteral = null; 
}
{
	exactNumericLiteral = exactNumericLiteral() { return new UnsignedNumericLiteral(exactNumericLiteral); }
	| approximateNumericLiteral = approximateNumericLiteral() { return new UnsignedNumericLiteral(approximateNumericLiteral); }
}
GeneralLiteral generalLiteral():
{
	CharacterStringLiteral characterStringLiteral = null;
	IntervalLiteral intervalLiteral = null;
}
{
	characterStringLiteral = characterStringLiteral() { return new GeneralLiteral(characterStringLiteral); }
	| intervalLiteral = intervalLiteral() { return new GeneralLiteral(intervalLiteral); }
}
IntervalLiteral intervalLiteral():
{
	UnsignedInteger unsignedInteger = null;
	DatetimeField datetimeField = null;
}
{
	<interval> unsignedInteger = unsignedInteger() datetimeField = datetimeField() { return new IntervalLiteral(unsignedInteger, datetimeField); }
}
DatetimeField datetimeField():
{
	Token token = null;
}
{
	token = <date_time_field> { return DatetimeField.valueOf(token.image.toUpperCase()); }
}
CharacterStringLiteral characterStringLiteral():
{
	StringBuilder builder = new StringBuilder();
	Token token;
}
{
	<start_single_quote>
	(
		token = <not_single_quote> { builder.append(token.image); }
		| <escape_single_quote>  { builder.append("'"); }
	)*
	<end_single_quote>
	{ return new CharacterStringLiteral(builder.toString()); }
}
ValueExpressionPrimary valueExpressionPrimary():
{
	UnsignedValueSpecification unsignedValueSpecification = null;
	ColumnReference columnReference = null;
	SetFunctionSpecification setFunctionSpecification = null;
	ParenthesizedValueExpression parenthesizedValueExpression;
}
{
	setFunctionSpecification = setFunctionSpecification() { return new ValueExpressionPrimary(setFunctionSpecification);}
	| columnReference = columnReference() { return new ValueExpressionPrimary(columnReference);}
	| unsignedValueSpecification = unsignedValueSpecification() { return new ValueExpressionPrimary(unsignedValueSpecification); }
	| parenthesizedValueExpression = parenthesizedValueExpression() { return new ValueExpressionPrimary(parenthesizedValueExpression); }
}
ParenthesizedValueExpression parenthesizedValueExpression():
{
	ValueExpression valueExpression;
}
{
	<left_paren> valueExpression = valueExpression() <right_paren> { return new ParenthesizedValueExpression(valueExpression); }
}
UnsignedValueSpecification unsignedValueSpecification():
{
	UnsignedLiteral unsignedLiteral;
}
{
	unsignedLiteral = unsignedLiteral() { return new UnsignedValueSpecification(unsignedLiteral); }
}
UnsignedLiteral unsignedLiteral():
{
	UnsignedNumericLiteral unsignedNumericLiteral;
	GeneralLiteral generalLiteral;
}
{
	unsignedNumericLiteral = unsignedNumericLiteral() { return new UnsignedLiteral(unsignedNumericLiteral); }
	| generalLiteral = generalLiteral() { return new UnsignedLiteral(generalLiteral); }
}
Identifier identifier():
{
	ActualIdentifier actualIdentifier = null;
}
{
	actualIdentifier = actualIdentifier()
	{ return new Identifier(actualIdentifier);}
}
ActualIdentifier actualIdentifier():
{
	RegularIdentifier regularIdentifier = null;
	DelimitedIdentifier delmitedIdentifier = null;
	EntityId entityId = null;
}
{
	regularIdentifier = regularIdentifier() { return new ActualIdentifier(regularIdentifier); }
	| delmitedIdentifier = delimitedIdentifier() { return new ActualIdentifier(delmitedIdentifier); }
	| entityId = entityId() { return new ActualIdentifier(entityId); }
}
DelimitedIdentifier delimitedIdentifier():
{ 
	DoubleQuoteDelimitedIdentifier doubleQuoteDelimitedIdentifier;
	BacktickDelimitedIdentifier backtickDelimitedIdentifier;
}
{
	doubleQuoteDelimitedIdentifier = doubleQuoteDelimitedIdentifier() { return new DelimitedIdentifier(doubleQuoteDelimitedIdentifier); }
	| backtickDelimitedIdentifier = backtickDelimitedIdentifier() { return new DelimitedIdentifier(backtickDelimitedIdentifier); }
}
DoubleQuoteDelimitedIdentifier doubleQuoteDelimitedIdentifier():
{ 
	Token token = null;
	StringBuilder builder = new StringBuilder();
}
{
	<start_double_quote>
	( 
		token = <not_double_quote> { builder.append(token.image); }
		| <escape_double_quote> { builder.append("\""); }
	)*
	<end_double_quote>
	{ return new DoubleQuoteDelimitedIdentifier(builder.toString()); }
}
BacktickDelimitedIdentifier backtickDelimitedIdentifier():
{ 
	Token token = null;
	StringBuilder builder = new StringBuilder();
}
{
	<start_backtick>
	( 
		token = <not_backtick> { builder.append(token.image); }
		| <escape_backtick> { builder.append("`"); }
	)*
	<end_backtick>
	{ return new BacktickDelimitedIdentifier(builder.toString()); }
}
ColumnReference columnReference():
{
	ColumnName nameLHSOrRHS = null;
	ColumnName nameRHS = null;
}
{
	nameLHSOrRHS = columnName() [ <period> nameRHS = columnName() ]
	{ return new ColumnReference(nameLHSOrRHS, nameRHS); }
}
QuerySpecification querySpecification():
{
	SetQuantifier setQuantifier = null;
	SelectList selectList = null;
	TableExpression tableExpression = null;
}
{
	<select> [ setQuantifier = setQuantifier()] selectList = selectList() [ tableExpression = tableExpression() ] <EOF>
	{ return new QuerySpecification(setQuantifier, selectList, tableExpression); }
}
SelectList selectList():
{
	List<DerivedColumn> derivedColumns = new LinkedList<DerivedColumn>();
	DerivedColumn derivedColumn = null;
}
{
	<asterisk> { return new SelectList(Boolean.TRUE); }
	| derivedColumn = selectSubList()  { derivedColumns.add(derivedColumn); }
	 (<comma> derivedColumn = selectSubList()  { derivedColumns.add(derivedColumn); })*
	 { return new SelectList(derivedColumns); }
}
DerivedColumn selectSubList():
{
	DerivedColumn derivedColumn = null;
}
{
	derivedColumn = derivedColumn()
	{ return derivedColumn; }
}
DerivedColumn derivedColumn():
{
	AsClause asClause = null;
	ValueExpression valueExpression = null;
}
{
	valueExpression = valueExpression() [ asClause = asClause()]
	{ return new DerivedColumn(valueExpression, asClause);}
}
AsClause asClause():
{
	ColumnName columnName = null;
}
{
	<as> columnName = columnName()
	{ return new AsClause(columnName); }
}
TableExpression tableExpression():
{
	FromClause fromClause = null;
	WhereClause whereClause = null;
	GroupByClause groupByClause = null;
	OrderByClause orderByClause = null; 
	Pagination pagination = null;
}
{
	fromClause = fromClause() 
	[ whereClause = whereClause() ]
	[ groupByClause = groupByClause() ]
	[ orderByClause = orderByClause() ]
	[ pagination = pagination() ]
	{ return new TableExpression(fromClause, whereClause, groupByClause, orderByClause, pagination); }
}
FromClause fromClause():
{
	TableReference tableReference = null;
}
{
	<from> tableReference = tableReference()
	{ return new FromClause(tableReference); }
}
TableReference tableReference():
{
	TableName tableName = null;
}
{
	tableName = tableName()
	{ return new TableReference(tableName); }
}
ColumnName columnName():
{
	Identifier identifier = null;
}
{
	identifier = identifier() {return new ColumnName(identifier); }
}
SetQuantifier setQuantifier():
{}
{
	<distinct> { return SetQuantifier.DISTINCT;}
	|<all> { return SetQuantifier.ALL;}
}
TableName tableName():
{ 
	EntityId entityId = null;
	RegularIdentifier regularIdentifier = null;
}
{	
	entityId = entityId() { return new TableName(entityId); } 
	| regularIdentifier = regularIdentifier() { return new TableName(regularIdentifier); }
}
SetFunctionSpecification setFunctionSpecification():
{ SetFunctionSpecification setFunction = null; }
{
	<count_asterisk>
	{ return new SetFunctionSpecification(Boolean.TRUE); }
	| setFunction = generalSetFunction() { return setFunction;}
}
SetFunctionSpecification generalSetFunction():
{ 
	SetFunctionType setFunctionType = null;
	SetQuantifier setQuantifier = null;
	ValueExpression valueExpression = null;
	OrderByClause orderByClause = null;
	Separator separatorClause = null;
}
{
	setFunctionType = setFunctionType() 
	<left_paren>
	 [ setQuantifier = setQuantifier() ] valueExpression = valueExpression()
	 [ orderByClause = orderByClause() ]
	 [ separatorClause = separatorClause() ] 
	<right_paren>
	{ return new SetFunctionSpecification(setFunctionType, setQuantifier, valueExpression, orderByClause, separatorClause);}
}
SetFunctionType setFunctionType():
{
	Token functionName;
}
{
	functionName = <aggregate_functions_name> { return SetFunctionType.valueOf(functionName.image.toUpperCase()); }
}
Separator separatorClause():
{
	CharacterStringLiteral characterStringLiteral;
}
{
	<separator> characterStringLiteral = characterStringLiteral() { return new Separator(characterStringLiteral); }
}
WhereClause whereClause():
{
	SearchCondition searchCondition;
}
{
	<where> searchCondition = searchCondition() { return new WhereClause(searchCondition);}
}
/**
* The reference BNF definition for searchCondition() is "left recursive"
* which is not possible with javacc, so it was re-written.
*/
SearchCondition searchCondition():
{
	SearchCondition searchCondition = new SearchCondition();
	BooleanTerm lastBooleanTerm = null;
}
{
	lastBooleanTerm = booleanTerm() { searchCondition.addOrBooleanTerm(lastBooleanTerm); }
	( <or> lastBooleanTerm = booleanTerm() { searchCondition.addOrBooleanTerm(lastBooleanTerm); } )*
	{ return searchCondition; }
}
/**
* The reference BNF definition for booleanTerm() is "left recursive"
* which is not possible with javacc, so it was re-written. 
*/
BooleanTerm booleanTerm():
{
	BooleanTerm booleanTerm = new BooleanTerm();
	BooleanFactor booleanFactor = null;
}
{
	booleanFactor = booleanFactor() { booleanTerm.addAndBooleanFactor(booleanFactor); }
	( <and>  booleanFactor = booleanFactor() { booleanTerm.addAndBooleanFactor(booleanFactor); } )*
	{ return booleanTerm; }
}
BooleanFactor booleanFactor():
{
	Boolean notB = null;
	BooleanTest booleanTest = null;
}
{
	[ <not> { notB = Boolean.TRUE; } ] booleanTest = booleanTest() { return new BooleanFactor(notB, booleanTest); }
}
BooleanTest booleanTest():
{
	BooleanPrimary booleanPrimary = null;
	Boolean isB = null;
	Boolean notB = null;
	TruthValue truthValue = null;
}
{
	booleanPrimary = booleanPrimary() [ <is> { isB = Boolean.TRUE; } [ <not> {notB = Boolean.TRUE; }] truthValue = truthValue() ]
	{ return new BooleanTest(booleanPrimary, isB, notB, truthValue); }
}
BooleanPrimary booleanPrimary():
{
	Predicate predicate = null;
	SearchCondition searchCondition = null;
}
{
	predicate = predicate() { return new BooleanPrimary(predicate);}
	|  <left_paren> searchCondition = searchCondition() <right_paren> { return new BooleanPrimary(searchCondition); }
}
Predicate predicate():
{
	ColumnReference leftHandSide = null;
	ComparisonPredicate comparisonPredicate = null;
	BetweenPredicate betweenPredicate = null;
	InPredicate inPredicate = null;
	LikePredicate likePredicate = null;
	IsPredicate isPredicate = null;
	ArrayHasPredicate arrayHasPredicate = null;
	BooleanFunctionPredicate booleanFunctionPredicate = null;
	Boolean notB = null;
}
{
	booleanFunctionPredicate = booleanFunctionPredicate() { return new Predicate(booleanFunctionPredicate); }
	| ( leftHandSide = columnReference()
		(
			comparisonPredicate = comparisonPredicate(leftHandSide) { return new Predicate(comparisonPredicate);}
			| <is> isPredicate = isPredicate(leftHandSide) { return new Predicate(isPredicate);}
			|(
				[ <not> {notB = Boolean.TRUE; }]
				(
						betweenPredicate = betweenPredicate(leftHandSide, notB) { return new Predicate(betweenPredicate); }
					|	inPredicate = inPredicate(leftHandSide, notB) { return new Predicate(inPredicate); }
					|   arrayHasPredicate = arrayHasPredicate(leftHandSide, notB){return new Predicate(arrayHasPredicate);}
					|	likePredicate = likePredicate(leftHandSide, notB) { return new Predicate(likePredicate); }
				)
			)
		)
	)
}
ComparisonPredicate comparisonPredicate(ColumnReference leftHandSide):
{
	CompOp compOp = null;
	RowValueConstructor rowValueConstructorRHS = null;
}
{
	compOp = compOp() rowValueConstructorRHS = rowValueConstructor()
	{ return new ComparisonPredicate(leftHandSide,compOp,rowValueConstructorRHS);}
}
RowValueConstructor rowValueConstructor():
{
	RowValueConstructorElement rowValueConstructorElement = null;
}
{
	rowValueConstructorElement = rowValueConstructorElement() { return new RowValueConstructor(rowValueConstructorElement); }
}
RowValueConstructorList rowValueConstructorList():
{
	RowValueConstructorList rowValueConstructorList = new RowValueConstructorList();
	RowValueConstructorElement rowValueConstructorElement;
}
{
	rowValueConstructorElement = rowValueConstructorElement() { rowValueConstructorList.addRowValueConstructorElement(rowValueConstructorElement); }
	(<comma> rowValueConstructorElement = rowValueConstructorElement() { rowValueConstructorList.addRowValueConstructorElement(rowValueConstructorElement); } )*
	{ return rowValueConstructorList; } 
}
RowValueConstructorElement rowValueConstructorElement():
{
	ValueExpression valueExpression;
	TruthValue truthValue;
}
{
		<null_specification> { return new RowValueConstructorElement(new NullSpecification()); }
	|	<default_specification> { return new RowValueConstructorElement(new DefaultSpecification()); }
	|	truthValue = truthValue() { return new RowValueConstructorElement(new TruthSpecification(truthValue)); }
	|	valueExpression = valueExpression() { return new RowValueConstructorElement(valueExpression); }
}
CompOp compOp():
{}
{
		<equals_operator> { return CompOp.EQUALS_OPERATOR;}
	|   <not_equals_operator> { return CompOp.NOT_EQUALS_OPERATOR;}
	|   <less_than_operator> { return CompOp.LESS_THAN_OPERATOR;}
	|   <greater_than_operator> { return CompOp.GREATER_THAN_OPERATOR;}
	|   <less_than_or_equals_operator> { return CompOp.LESS_THAN_OR_EQUALS_OPERATOR;}
	|   <greater_than_or_equals_operator> {return CompOp.GREATER_THAN_OR_EQUALS_OPERATOR;} 
}
BetweenPredicate betweenPredicate(ColumnReference leftHandSide, Boolean notB):
{
	RowValueConstructor betweenRowValueConstructor = null;
	RowValueConstructor andRowValueConstructorRHS = null;
}
{
	<between> betweenRowValueConstructor = rowValueConstructor() <and>  andRowValueConstructorRHS = rowValueConstructor()
	{ return new BetweenPredicate(leftHandSide, notB, betweenRowValueConstructor, andRowValueConstructorRHS);}
}
ArrayHasPredicate arrayHasPredicate(ColumnReference leftHandSide, Boolean notB):
{
	InPredicateValue inPredicateValue = null;
}
{
	<has> inPredicateValue = inPredicateValue()
	{ return new ArrayHasPredicate(leftHandSide, notB, inPredicateValue);}

}
InPredicate inPredicate(ColumnReference leftHandSide, Boolean notB):
{
	InPredicateValue inPredicateValue = null;
}
{
	<in> inPredicateValue = inPredicateValue()
	{ return new InPredicate(leftHandSide, notB, inPredicateValue);}

}
InPredicateValue inPredicateValue():
{
	InValueList inValueList = null;
}
{
	<left_paren> inValueList = inValueList() <right_paren>
	{ return new InPredicateValue(inValueList); }
}
InValueList inValueList():
{
	InValueList inValueList = new InValueList();
	ValueExpression valueExpression = null;
}
{
	valueExpression = valueExpression() { inValueList.addValueExpression(valueExpression); }
	( <comma> valueExpression = valueExpression() { inValueList.addValueExpression(valueExpression); } )*
	{ return inValueList; }
}
LikePredicate likePredicate(ColumnReference leftHandSide, Boolean notB):
{
	Pattern pattern = null;
	EscapeCharacter escapeCharacter = null;
}
{
	<like> pattern = pattern() [ <escape> escapeCharacter = escapeCharacter() ]
	{ return new LikePredicate(leftHandSide,notB,pattern,escapeCharacter);}
}
MatchValue matchValue():
{
	CharacterValueExpression characterValueExpression = null;
}
{
	characterValueExpression = characterValueExpression()
	{return new MatchValue(characterValueExpression);}
}
Pattern pattern():
{
	CharacterValueExpression characterValueExpression = null;
}
{
	characterValueExpression = characterValueExpression()
	{return new Pattern(characterValueExpression);}
}
EscapeCharacter escapeCharacter():
{
	CharacterValueExpression characterValueExpression = null;
}
{
	characterValueExpression = characterValueExpression()
	{return new EscapeCharacter(characterValueExpression);}
}
IsPredicate isPredicate(ColumnReference leftHandSide):
{
	Boolean notB = null;
	TruthValue truthValue = null;
}
{
	[ <not> {notB=Boolean.TRUE;}]
	(
	  	  truthValue = truthValue() { return new BooleanPredicate(leftHandSide, notB, truthValue); }
	 	| <null_specification> { return new NullPredicate(leftHandSide, notB); }
	)
}
BooleanFunctionPredicate booleanFunctionPredicate():
{
	BooleanFunction booleanFunction = null;
	ColumnReference columnReference = null;
}
{
	booleanFunction = booleanFunction() <left_paren> columnReference = columnReference() <right_paren>
	{ return new BooleanFunctionPredicate(booleanFunction, columnReference); }
}
BooleanFunction booleanFunction():
{}
{
	<is_nan> { return BooleanFunction.ISNAN; }
	| <is_infinity> { return BooleanFunction.ISINFINITY; }
}
ValueExpression valueExpression():
{
  	NumericValueExpression numericValueExpression = null;
}
{
	numericValueExpression = numericValueExpression() { return new ValueExpression(numericValueExpression); }
}
/**
* The reference BNF definition for numericValueExpression() is "left recursive"
* so it was re-written using a list of optional primes.
*/
NumericValueExpression numericValueExpression():
{
	NumericValueExpression numericValueExpression = null;
	Term term = null;
	TermPrime termPrime = null;
}
{
	term = term() { numericValueExpression = new NumericValueExpression(term); }
	(
		termPrime = termPrime() { numericValueExpression.addTermPrime(termPrime); }
	)*
	{ return numericValueExpression; } 
}
TermPrime termPrime():
{
	Term term = null;
}
{
	<plus_sign> term = term() { return new TermPrime(ArithmeticOperator.PLUS_SIGN, term); }
	| <minus_sign> term = term() { return new TermPrime(ArithmeticOperator.MINUS_SIGN, term); }
}
/**
* The reference BNF definition for term() is "left recursive"
* so it was re-written using a list of optional primes.
*/
Term term():
{
	Term term = null;
	Factor factor = null;
	FactorPrime factorPrime = null;
}
{
	factor = factor() { term = new Term(factor); }
	(
		factorPrime = factorPrime() { term.addFactorPrime(factorPrime); }
	)*
	{ return term; } 
}
FactorPrime factorPrime():
{
	Factor factor = null;
}
{
	<asterisk> factor = factor() { return new FactorPrime(ArithmeticOperator.ASTERISK, factor); }
	| <solidus> factor = factor() { return new FactorPrime(ArithmeticOperator.SOLIDUS, factor); }
	| <div> factor = factor() { return new FactorPrime(ArithmeticOperator.DIV, factor); }
	| <modulo> factor = factor() { return new FactorPrime(ArithmeticOperator.MODULO, factor); }
}
Sign sign():
{}
{
	<plus_sign> { return Sign.PLUS; }
	| <minus_sign> { return Sign.MINUS; }
}
Factor factor():
{
	Sign sign = null;
	NumericPrimary numericPrimary = null;
}
{
	[ sign = sign() ] numericPrimary = numericPrimary() { return new Factor(sign, numericPrimary); }
}
NumericPrimary numericPrimary():
{
	ValueExpressionPrimary valueExpressionPrimary = null;
	NumericValueFunction numericValueFunction = null;
}
{
	valueExpressionPrimary = valueExpressionPrimary() { return new NumericPrimary(valueExpressionPrimary); }
	| numericValueFunction = numericValueFunction() { return new NumericPrimary(numericValueFunction); }
}
NumericValueFunction numericValueFunction():
{
	MySqlFunction mysqlFunction = null;
}
{
	mysqlFunction = mysqlFunction() { return new NumericValueFunction(mysqlFunction); }
}
MySqlFunction mysqlFunction():
{
	MySqlFunction mySqlFunction = null;
 	MySqlFunctionName functionName = null;
 	ValueExpression valueExpression;
}
{
	functionName = mySqlFunctionName() { mySqlFunction = new MySqlFunction(functionName); }
	[ 
		<left_paren> { mySqlFunction.startParentheses(); }
		[  
			valueExpression = valueExpression() { mySqlFunction.addParameter(valueExpression); }
			(
				<comma> valueExpression = valueExpression() { mySqlFunction.addParameter(valueExpression); }
			)*
		]
		<right_paren>
	]
	{ return mySqlFunction; }
}
MySqlFunctionName mySqlFunctionName():
{
	Token functionName = null;
}
{
	functionName = <date_time_function_name> { return MySqlFunctionName.valueOf(functionName.image.toUpperCase()); }
	| functionName = <string_function_name> { return MySqlFunctionName.valueOf(functionName.image.toUpperCase()); }
	| functionName = <date_time_field> { return MySqlFunctionName.valueOf(functionName.image.toUpperCase()); }
}
StringValueExpression stringValueExpression():
{
	CharacterValueExpression characterValueExpression;
}
{
	characterValueExpression = characterValueExpression() { return new StringValueExpression(characterValueExpression); }
}
CharacterValueExpression characterValueExpression():
{
	CharacterFactor characterFactor = null;
}
{
	characterFactor = characterFactor() { return new CharacterValueExpression(characterFactor); }
}
CharacterFactor characterFactor():
{
	CharacterPrimary characterPrimary;
}
{
	characterPrimary = characterPrimary() { return new CharacterFactor(characterPrimary); }
}
CharacterPrimary characterPrimary():
{
	ValueExpressionPrimary valueExpressionPrimary = null;
}
{
	valueExpressionPrimary = valueExpressionPrimary() { return new CharacterPrimary(valueExpressionPrimary); }
}
TruthValue truthValue():
{}
{
	<_true> { return TruthValue.TRUE; }
	| <_false> { return TruthValue.FALSE; }
	| <unknown> { return TruthValue.UNKNOWN; }
}
GroupByClause groupByClause():
{
	GroupingColumnReferenceList groupingColumnReferenceList = null;
}
{
	<group_by> groupingColumnReferenceList = groupingColumnReferenceList()
	{ return new GroupByClause(groupingColumnReferenceList);}
}
GroupingColumnReferenceList groupingColumnReferenceList():
{
	GroupingColumnReferenceList groupingColumnReferenceList = new GroupingColumnReferenceList();
	GroupingColumnReference groupingColumnReference;
}
{
	groupingColumnReference = groupingColumnReference() { groupingColumnReferenceList.addGroupingColumnReference(groupingColumnReference); }
	 (
	 	<comma> groupingColumnReference = groupingColumnReference() { groupingColumnReferenceList.addGroupingColumnReference(groupingColumnReference); }
	 )*
	 { return groupingColumnReferenceList; } 
}
GroupingColumnReference groupingColumnReference():
{
	ValueExpression valueExpression = null;
}
{
	valueExpression = valueExpression() { return new GroupingColumnReference(valueExpression); }
}
OrderByClause orderByClause():
{
	SortSpecificationList sortSpecificationList = null;
}
{
	<order_by> sortSpecificationList = sortSpecificationList()
	{ return new OrderByClause(sortSpecificationList); }
}
SortSpecificationList sortSpecificationList():
{
	SortSpecificationList sortSpecificationList = new SortSpecificationList();
	SortSpecification sortSpecification = null;
}
{
	sortSpecification = sortSpecification() { sortSpecificationList.addSortSpecification(sortSpecification); }
	(
		<comma> sortSpecification = sortSpecification() { sortSpecificationList.addSortSpecification(sortSpecification); }
	)*
	{ return sortSpecificationList; }
}
SortSpecification sortSpecification():
{
	SortKey sortKey = null;
	OrderingSpecification orderingSpecification = null;
}
{
	sortKey = sortKey() [ orderingSpecification = orderingSpecification() ]
	{ return new SortSpecification(sortKey, orderingSpecification); }
}
SortKey sortKey():
{
	ValueExpression valueExpression = null;
}
{
	valueExpression = valueExpression()
	{ return new SortKey(valueExpression); }
}
OrderingSpecification orderingSpecification():
{}
{
	<asc> { return OrderingSpecification.ASC; }
	| <desc>  { return OrderingSpecification.DESC; }
}
Pagination pagination():
{
	UnsignedInteger _limit = null;
	UnsignedInteger _offset = null;
}
{
	<limit> _limit = unsignedInteger() [ <offset> _offset = unsignedInteger() ]
	{ return new Pagination(_limit, _offset); }
}