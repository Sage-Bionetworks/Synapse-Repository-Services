<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- Turn on Spring's auotproxy using AspectJ's @Aspect annotations. -->
	<aop:aspectj-autoproxy />

	<!-- Information need to connect to AWS -->
	<import resource="aws-spb.xml" />
	<import resource="dao-beans.spb.xml" />

	<!-- Create the AWS search client using the current credentials. Prototype 
		because we want a new one for each bean -->
	<bean id="awsSNSClient" class="com.amazonaws.services.sns.AmazonSNSClient"
		scope="prototype">
		<constructor-arg ref="awsCredentials" />
	</bean>

	<!-- The AmazonSQSClient -->
	<bean id="awsSQSClient" class="com.amazonaws.services.sqs.AmazonSQSClient"
		scope="singleton">
		<constructor-arg ref="awsCredentials" />
	</bean>

	<!-- The RepositoryMessagePublisher publish repository change messages to 
		an AWS topic -->
	<bean id="messagePublisher"
		class="org.sagebionetworks.repo.manager.message.RepositoryMessagePublisherImpl"
		init-method="initialize">
		<constructor-arg type="java.lang.String">
			<ref bean="stackConfiguration.repositoryChangeTopicName" />
		</constructor-arg>
		<property name="shouldMessagesBePublishedToTopic"
			ref="stackConfiguration.shouldMessagesBePublishedToTopic"></property>
		<property name="listUnsentMessagePageSize" value="25000" />
		<!-- This will determine how long the worker can hold the semaphore lock 
			while processing un-sent messages We want to give the worker plenty of time 
			to do its job before attempting a forced lock release so this is currently 
			set to 30 Minutes (1000*60*30). -->
		<property name="lockTimeoutMS" value="1800000" />
	</bean>

	<!-- This is how messages get rebroadcast -->
	<bean id="messageSyndication"
		class="org.sagebionetworks.repo.manager.message.MessageSyndicationImpl" />

	<!-- This trigger will fire changes messages pushed to the queue -->
	<bean id="messagePublisherTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail">
			<bean
				class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
				<property name="targetObject" ref="messagePublisher" />
				<property name="targetMethod" value="timerFired" />
			</bean>
		</property>
		<property name="startDelay" value="0" />
		<property name="repeatInterval" value="100" />
	</bean>

	<!-- This trigger is used to find any unsent messages. It is fired once 
		every 10 seconds -->
	<bean id="unsentMessagesTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail">
			<bean
				class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
				<property name="targetObject" ref="messagePublisher" />
				<property name="targetMethod" value="timerFiredFindUnsentMessages" />
			</bean>
		</property>
		<property name="startDelay" value="10000" />
		<property name="repeatInterval" value="10000" />
	</bean>


</beans>