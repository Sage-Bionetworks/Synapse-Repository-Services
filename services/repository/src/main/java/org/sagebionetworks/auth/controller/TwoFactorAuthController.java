package org.sagebionetworks.auth.controller;

import org.sagebionetworks.auth.services.AuthenticationService;
import org.sagebionetworks.repo.model.AuthorizationConstants;
import org.sagebionetworks.repo.model.auth.LoginResponse;
import org.sagebionetworks.repo.model.auth.TotpSecret;
import org.sagebionetworks.repo.model.auth.TotpSecretActivationRequest;
import org.sagebionetworks.repo.model.auth.TwoFactorAuthLoginRequest;
import org.sagebionetworks.repo.model.auth.TwoFactorAuthRecoveryCodes;
import org.sagebionetworks.repo.model.auth.TwoFactorAuthStatus;
import org.sagebionetworks.repo.model.oauth.OAuthScope;
import org.sagebionetworks.repo.web.RequiredScope;
import org.sagebionetworks.repo.web.UrlHelpers;
import org.sagebionetworks.repo.web.rest.doc.ControllerInfo;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.util.UriComponentsBuilder;

/**
 * <p>
 * APIs to manage two factor authentication (2FA) in Synapse.
 * </p
 * <p>
 * Synapse currently supports using authenticator applications that can generate a <a href="https://en.wikipedia.org/wiki/Time-based_one-time_password">TOTP</a> that is used as a second factor. 
 * </p>
 * <p>
 * To enable 2FA two requests are involved:
 * 
 * <ol>
 * <li><a href="${POST.2fa.enroll}">POST /2fa/enroll</a>: Generates a shared secret that is added to the user authenticator application</li>
 * <li><a href="${POST.2fa}">POST /2fa</a>: Enables a specific secret generated by 1. to be used as second factor</li>
 * </ol>
 * </p>
 * 
 * <p>
 * In order to login through 2FA an additional request needs to be performed after the user attempts to authenticate (e.g. through the <a href="${POST.login2}">POST /login2</a> API). 
 * If the user has 2FA enabled, they will receive a 401 and the body of the response will contain a twoFaToken that can be used in the <a href="${POST.2fa.token}">POST /2fa/token</a> API to obtain an access token.
 * </p>
 * 
 * <p>
 * The user can additionally generate a set of recovery codes using the <a href="${POST.2fa.recoveryCodes}">POST /2fa/recoveryCodes</a> API. The codes are one time use and can be used in place of a TOTP code when
 * performing 2FA authentication. The body of the <a href="${POST.2fa.token}">POST /2fa/token</a> request should specify as otpType RECOVERY_CODE and the value of the otpCode should match one of the generated codes.
 * </p>
 */
@ControllerInfo(displayName = "Authentication Services (2FA)", path = "auth/v1")
@Controller
@RequestMapping(UrlHelpers.AUTH_PATH)
public class TwoFactorAuthController {
	
	private AuthenticationService service;

	public TwoFactorAuthController(AuthenticationService service) {
		this.service = service;
	}
	
	/**
	 * Initiates the enrollment into two factor authentication. Generates a shared secret that can be used by an authenticator application to generate TOTPs.
	 * <p>
	 * This endpoint can be invoked even if the user has 2FA already enabled, a new secret will be generated and kept inactive until the user completes the activation process.
	 * </p>
	 * <p>
	 * The response includes the base32 encoded secret that can be directly used in the authenticator application.
	 * The client can generate a QR code for convenience so that the user can scan the secret instead.
	 * The URL to embed in the QR code can follow this format: <a href="https://github.com/google/google-authenticator/wiki/Key-Uri-Format">https://github.com/google/google-authenticator/wiki/Key-Uri-Format</a>.
	 * </p>
	 * <p>
	 * For example: otpauth://totp/Synapse:alice@google.com?secret=secret&issuer=Synapse%20Prod&algorithm=SHA1&digits=6&period=30.
	 * </p>
	 * @param userId
	 * @return The generated TOTP secret that can be used in the user authenticator application, the secret is not active. 
	 * To use this secret for 2FA a <a href="${POST.2fa}">POST /2fa</a> must be performed that includes the secret id and a totp code.
	 */
	@RequiredScope({OAuthScope.modify, OAuthScope.authorize})
	@ResponseStatus(HttpStatus.CREATED)
	@RequestMapping(value = UrlHelpers.TWO_FA_ENROLL, method = RequestMethod.POST)
	public @ResponseBody TotpSecret enroll(@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId) {
		return service.enroll2Fa(userId);
	}
	
	/**
	 * Finalize 2FA enrollment, activating the secret associated with the id in the request. This endpoint can be use to replace an existing 2FA secret previously enabled.
	 * 
	 * @param request
	 * @param userId
	 * @return The status of 2FA for the user
	 */
	@RequiredScope({OAuthScope.modify, OAuthScope.authorize})
	@ResponseStatus(HttpStatus.OK)
	@RequestMapping(value = UrlHelpers.TWO_FA, method = RequestMethod.POST)
	public @ResponseBody TwoFactorAuthStatus enable(@RequestBody TotpSecretActivationRequest request, @RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId) {
		return service.enable2Fa(userId, request);
	}
	
	/**
	 * Fetch the current 2FA status for the user.
	 * 
	 * @param userId
	 * @return The status of 2FA for the user
	 */
	@RequiredScope({OAuthScope.view})
	@ResponseStatus(HttpStatus.OK)
	@RequestMapping(value = UrlHelpers.TWO_FA, method = RequestMethod.GET)
	public @ResponseBody TwoFactorAuthStatus getStatus(@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId) {
		return service.get2FaStatus(userId);
	}
	
	/**
	 * Disable 2FA for the user.
	 * 
	 * @param userId
	 */
	@RequiredScope({OAuthScope.modify, OAuthScope.authorize})
	@ResponseStatus(HttpStatus.OK)
	@RequestMapping(value = UrlHelpers.TWO_FA, method = RequestMethod.DELETE)
	public void disable(@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId) {
		service.disable2Fa(userId);
	}
	
	/**
	 * Performs authentication using 2FA, the body of the request needs to include the twoFaToken received as part of the error when authenticating 
	 * and the totp code shown by the authenticator application.
	 * 
	 * @param request
	 * @param uriComponentsBuilder
	 * @return
	 */
	@RequiredScope({})
	@ResponseStatus(HttpStatus.OK)
	@RequestMapping(value = UrlHelpers.TWO_FA_TOKEN, method = RequestMethod.POST)
	public @ResponseBody LoginResponse login(@RequestBody TwoFactorAuthLoginRequest request, UriComponentsBuilder uriComponentsBuilder) {
		return service.loginWith2Fa(request, EndpointHelper.getEndpoint(uriComponentsBuilder));
	}
	
	/**
	 * Generates a new set of single use recovery codes that are associated with the two factor authentication of the user. The recovery codes are single use and can
	 * be used to login with 2FA in place of an TOTP. In order to use a recovery code the body of the <a href="${POST.2fa.token}">login</a> request should specify as the
	 * otpType RECOVERY_CODE and the otpCode should match one of the generated recovery codes.
	 * <p>
	 * Note that invoking this endpoint will replace existing recovery codes.
	 * </p> 
	 *  
	 * @param userId
	 * @return
	 */
	@RequiredScope({OAuthScope.modify, OAuthScope.authorize})
	@ResponseStatus(HttpStatus.CREATED)
	@RequestMapping(value = UrlHelpers.TWO_FA_RECOVERY_CODES, method = RequestMethod.POST)
	public @ResponseBody TwoFactorAuthRecoveryCodes generateRecoveryCodes(@RequestParam(value = AuthorizationConstants.USER_ID_PARAM) Long userId) {
		return service.generate2faRecoveryCodes(userId);
	}

}
