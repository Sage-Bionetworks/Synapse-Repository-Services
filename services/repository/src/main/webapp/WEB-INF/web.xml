<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">

	<display-name>Synapse Web Services</display-name>

	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>

	<!-- The context params that read by ContextLoaderListener -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/shared-context.xml</param-value>
	</context-param>

	<!-- This is required for logging: see http://logging.apache.org/log4j/2.x/manual/webapp.html -->
	<listener>
		<listener-class>org.apache.logging.log4j.core.web.Log4jServletContextListener</listener-class>
	</listener>
	<!-- This is required for logging: see http://logging.apache.org/log4j/2.x/manual/webapp.html -->
	<filter>
		<filter-name>log4jServletFilter</filter-name>
		<filter-class>org.apache.logging.log4j.core.web.Log4jServletFilter</filter-class>
	</filter>
	<!-- This is required for logging: see http://logging.apache.org/log4j/2.x/manual/webapp.html -->
	<filter-mapping>
		<filter-name>log4jServletFilter</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
		<dispatcher>INCLUDE</dispatcher>
		<dispatcher>ERROR</dispatcher>
	</filter-mapping>


	<!-- This listener will load other application context file in addition 
		to springweb-servlet.xml -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Some browsers do not support PUT and DELETE methods, this filter will 
		examine the form field parameter _method -->
	<filter>
		<filter-name>httpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>httpMethodFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- This filter will look for the session token as a cookie, if it finds 
		it, the token will be added to the header of the request -->
	<filter>
		<filter-name>cookieFilter</filter-name>
		<filter-class>org.sagebionetworks.authutil.CookieSessionTokenFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>cookieFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>CrowdAuth</filter-name>
		<filter-class>org.sagebionetworks.authutil.CrowdAuthenticationFilter</filter-class>
		<init-param>
			<param-name>allow-anonymous</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>CrowdAuth</filter-name>
		<url-pattern>/auth/v1/user</url-pattern>
		<url-pattern>/auth/v1/userPassword</url-pattern>
		<url-pattern>/auth/v1/changeEmail</url-pattern>
		<url-pattern>/auth/v1/apiPasswordEmail</url-pattern>
		<url-pattern>/auth/v1/secretKey</url-pattern>
		<url-pattern>/auth/v1/resourceAccess/*</url-pattern>
		<url-pattern>/auth/v1/resourceSession/*</url-pattern>
		<url-pattern>/repo/v1/*</url-pattern>
		<url-pattern>/file/v1/*</url-pattern>
	</filter-mapping>


	<filter>
		<filter-name>profileFilter</filter-name>
		<filter-class>org.sagebionetworks.profiler.ProfileFilter</filter-class>
		<init-param>
			<param-name>default_value</param-name>
			<param-value>false</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>profileFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>jsonpCallbackFilter</filter-name>
		<!-- This filter allows JSONP to be returned for methods that are already 
			returning JSON -->
		<filter-class>org.sagebionetworks.repo.web.filter.JsonpCallbackFilter</filter-class>
		<init-param>
			<param-name>default_value</param-name>
			<param-value>false</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>jsonpCallbackFilter</filter-name>
		<!-- This filter should only be used on publicly accessible methods to 
			minimize the risks of Cross-site request forgery (CSRF) associated with JSONP. 
			Only add patterns that are public! -->
		<url-pattern>/repo/v1/concept/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>jsonpCallbackFilter</filter-name>
		<!-- This filter should only be used on publicly accessible methods to 
			minimize the risks of Cross-site request forgery (CSRF) associated with JSONP. 
			Only add patterns that are public! -->
			
		<url-pattern>/repo/v1/userGroupHeaders/*</url-pattern>
		<!--  This is the uri for looking up teams by name fragment -->
		<url-pattern>/repo/v1/teams</url-pattern>
		<!--  This is the uri for looking up team members by name fragment -->
		<url-pattern>/repo/v1/teamMembers/*</url-pattern>
	</filter-mapping>

	<servlet>
		<servlet-name>repository</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- These two parameters are required to register an interceptor with 
			the org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter. 
			Without them the handler simply will not be used. jmhill 12/10/11 -->
		<init-param>
			<param-name>detectAllHandlerMappings</param-name>
			<param-value>true</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>repository</servlet-name>
		<url-pattern>/repo/v1/*</url-pattern>
	</servlet-mapping>

	<servlet>
		<servlet-name>authentication</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>


	<servlet>
		<servlet-name>tomcatDefaultServlet</servlet-name>
		<servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>
	</servlet>


	<servlet-mapping>
		<servlet-name>tomcatDefaultServlet</servlet-name>
		<url-pattern>/auth/v1/termsOfUse.html</url-pattern>
	</servlet-mapping>


	<servlet-mapping>
		<servlet-name>authentication</servlet-name>
		<url-pattern>/auth/v1/*</url-pattern>
	</servlet-mapping>

	<!-- This filter will look for the session token as a cookie, if it finds 
		it, the token will be added to the header of the request -->
	<filter>
		<filter-name>CORSFilter</filter-name>
		<filter-class>org.sagebionetworks.authutil.SimpleCORSFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>CORSFilter</filter-name>
		<url-pattern>*</url-pattern>
	</filter-mapping>

	<servlet>
		<servlet-name>login</servlet-name>
		<servlet-class>org.sagebionetworks.file.servlet.SimpleLoginServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>login</servlet-name>
		<url-pattern>/login/v1/*</url-pattern>
	</servlet-mapping>

	<servlet>
		<servlet-name>file</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- These two parameters are required to register an interceptor with 
			the org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter. 
			Without them the handler simply will not be used. jmhill 12/10/11 -->
		<init-param>
			<param-name>detectAllHandlerMappings</param-name>
			<param-value>true</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>file</servlet-name>
		<url-pattern>/file/v1/*</url-pattern>
	</servlet-mapping>

</web-app>
