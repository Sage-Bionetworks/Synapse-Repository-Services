<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xmlns="http://java.sun.com/xml/ns/javaee"
		 xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
		 version="2.5">

	<display-name>Synapse Web Services</display-name>

	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>

	<!-- The context params that read by ContextLoaderListener -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/shared-context.xml</param-value>
	</context-param>

	<!-- This listener will load other application context file in addition 
		to springweb-servlet.xml -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- This is the filter to redirect http:// to https:// -->
	<filter>
		<filter-name>httpToHttpsFilter</filter-name>
		<filter-class>org.sagebionetworks.repo.web.filter.HttpToHttpsRedirectFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>httpToHttpsFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- This must remain the top-most filter in the filter chain.
	 It is our last chance to capture and log unexpected exceptions.  
	 Without it, users could see errors that never make it into our logs.
	 See PLFM-3205 & PLFM-3206  -->
	<filter>
		<filter-name>unexpectedExceptionFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>unexpectedExceptionFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- This filter ensures all requests are within the size limit.
	See PLFM-4761  -->
	<filter>
		<filter-name>requestSizeThrottleFilter</filter-name>
		<filter-class>org.sagebionetworks.repo.web.filter.RequestSizeThrottleFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>requestSizeThrottleFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- Some browsers do not support PUT and DELETE methods, this filter will 
		examine the form field parameter _method -->
	<filter>
		<filter-name>httpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>httpMethodFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- This filter will look for the session token as a cookie, if it finds 
		it, the token will be added to the header of the request -->
	<filter>
		<filter-name>cookieFilter</filter-name>
		<filter-class>org.sagebionetworks.authutil.CookieSessionTokenFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>cookieFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>authFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<!-- Make sure the init-params are passed through the proxy to the bean -->
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>authFilter</filter-name>
		<url-pattern>/auth/v1/secretKey</url-pattern>
		<url-pattern>/auth/v1/personalAccessToken</url-pattern>
		<url-pattern>/auth/v1/personalAccessToken/*</url-pattern>
		<url-pattern>/auth/v1/oauth2/alias</url-pattern>
		<url-pattern>/auth/v1/oauth2/client/*</url-pattern>
		<url-pattern>/auth/v1/oauth2/consent</url-pattern>
		<url-pattern>/auth/v1/oauth2/consentcheck</url-pattern>
		<url-pattern>/auth/v1/oauth2/userinfo</url-pattern>
		<url-pattern>/auth/v1/oauth2/audit/*</url-pattern>
		<url-pattern>/repo/v1/*</url-pattern>
		<url-pattern>/file/v1/*</url-pattern>
	</filter-mapping>
	
	<!-- Filter that authenticate the administrative and migration services using basic auth -->
	<filter>
		<filter-name>adminServiceAuthFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<!-- Make sure the init-params are passed through the proxy to the bean -->
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>adminServiceAuthFilter</filter-name>
		<url-pattern>/repo/v1/admin/*</url-pattern>
		<url-pattern>/repo/v1/migration/*</url-pattern>
		<url-pattern>/repo/v1/testing/*</url-pattern>
	</filter-mapping>

	<!-- This filter will look for the session token as a cookie, if it finds
    it, the token will be added to the header of the request -->
	<filter>
		<filter-name>simpleCORSFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<!-- Make sure the init-params are passed through the proxy to the bean -->
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>simpleCORSFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>dockerClientAuthFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<!-- Make sure the init-params are passed through the proxy to the bean -->
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>dockerClientAuthFilter</filter-name>
		<url-pattern>/docker/v1/*</url-pattern>
	</filter-mapping>
	
	<filter>
		<filter-name>acceptTermsOfUseFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<!-- Make sure the init-params are passed through the proxy to the bean -->
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<!-- This applies to all paths that authenticate a Synapse user -->
	<filter-mapping>
		<filter-name>acceptTermsOfUseFilter</filter-name>
		<url-pattern>/auth/v1/secretKey</url-pattern>
		<url-pattern>/auth/v1/oauth2/alias</url-pattern>
		<url-pattern>/auth/v1/oauth2/client/*</url-pattern>
		<url-pattern>/auth/v1/oauth2/consent</url-pattern>
		<url-pattern>/auth/v1/oauth2/consentcheck</url-pattern>
		<url-pattern>/auth/v1/oauth2/userinfo</url-pattern>
		<url-pattern>/auth/v1/oauth2/audit/*</url-pattern>
		<url-pattern>/repo/v1/*</url-pattern>
		<url-pattern>/file/v1/*</url-pattern>
		<url-pattern>/docker/v1/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>dockerRegistryAuthFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<!-- Make sure the init-params are passed through the proxy to the bean -->
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>dockerRegistryAuthFilter</filter-name>
		<url-pattern>/dockerRegistryListener/v1/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>userConcurrentConnectionThrottleFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<!-- Make sure the init-params are passed through the proxy to the bean -->
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>userConcurrentConnectionThrottleFilter</filter-name>
		<url-pattern>/repo/v1/*</url-pattern>
		<url-pattern>/file/v1/*</url-pattern>
	</filter-mapping>
	
	<filter>
		<filter-name>userRequestFrequencyThrottleFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<!-- Make sure the init-params are passed through the proxy to the bean -->
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>userRequestFrequencyThrottleFilter</filter-name>
		<url-pattern>/repo/v1/*</url-pattern>
		<url-pattern>/file/v1/*</url-pattern>
	</filter-mapping>
	
	<filter>
		<filter-name>userApiFrequencyThrottleFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<!-- Make sure the init-params are passed through the proxy to the bean -->
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>userApiFrequencyThrottleFilter</filter-name>
		<url-pattern>/repo/v1/*</url-pattern>
		<url-pattern>/file/v1/*</url-pattern>
	</filter-mapping>
	
	<!-- This is a filter used only for integration testing (See ITUnhandledException) so that we can simulate an exception thrown at the filter level 
	(before hitting the dispatcher servlet) in order to verify the correct exception handling from the unexpectedExceptionFilter.
	 -->
	<filter>
		<filter-name>throwingExceptionFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	
	<filter-mapping>
		<filter-name>throwingExceptionFilter</filter-name>
		<url-pattern>/repo/v1/testing/exception</url-pattern>
	</filter-mapping>
	
	<filter>
		<filter-name>jsonpCallbackFilter</filter-name>
		<!-- This filter allows JSONP to be returned for methods that are already 
			returning JSON -->
		<filter-class>org.sagebionetworks.repo.web.filter.JsonpCallbackFilter</filter-class>
		<init-param>
			<param-name>default_value</param-name>
			<param-value>false</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>jsonpCallbackFilter</filter-name>
		<!-- This filter should only be used on publicly accessible methods to 
			minimize the risks of Cross-site request forgery (CSRF) associated with JSONP. 
			Only add patterns that are public! -->

		<url-pattern>/repo/v1/userGroupHeaders/*</url-pattern>
		<!-- This is the uri for looking up teams by name fragment -->
		<url-pattern>/repo/v1/teams</url-pattern>
		<!-- This is the uri for looking up team members by name fragment -->
		<url-pattern>/repo/v1/teamMembers/*</url-pattern>
		<!-- This is the uri for looking up team member count by name fragment -->
		<url-pattern>/repo/v1/teamMembers/count/*</url-pattern>
	</filter-mapping>

	<!-- Rather than using multiple DispatcherServlet each with their own Spring 
		context we are now using a singleton DispatcherServlet. See: PLFM-2530.
		Note that the context is loaded from the singleton-servlet.xml file and it's
		a child context of the root application context which is setup above by the 
		ContextLoaderListener from shared-context.xml.
		The DispatcherServlet has access to all the beans defined in the root context, 
		but not the other way around: the root context cannot access beans defined in the 
		child contexts.
	-->
	<servlet>
		<servlet-name>singleton</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- These two parameters are required to register an interceptor with 
			the org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter. 
			Without them the handler simply will not be used. jmhill 12/10/11 -->
		<init-param>
			<param-name>detectAllHandlerMappings</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>throwExceptionIfNoHandlerFound</param-name>
			<param-value>true</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>singleton</servlet-name>
		<url-pattern>/*</url-pattern>
	</servlet-mapping>
	
	<filter>
		<filter-name>HSTSFilter</filter-name>
		<filter-class>org.sagebionetworks.repo.web.filter.HSTSFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>HSTSFilter</filter-name>
		<url-pattern>*</url-pattern>
	</filter-mapping>
	
	<filter>
		<filter-name>cloudMailInAuthFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<!-- Make sure the init-params are passed through the proxy to the bean -->
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter>
		<filter-name>cloudMailInAcceptPlainTextFilter</filter-name>
		<filter-class>org.sagebionetworks.repo.web.filter.CloudMailInAcceptPlainTextFilter</filter-class>
	</filter>

	<filter>
		<filter-name>cloudMailInContentTypeFilter</filter-name>
		<filter-class>org.sagebionetworks.repo.web.filter.CloudMailInCharacterEncodingFilter</filter-class>
	</filter>

    <!--  Note we tried applying the filter to both /cloudMailInMessage and /cloudMailInAuthorization,
    but CloudMailIn doesn't seem to pass the BasicAuthentication credentials when it calls the latter
    service.   -->
	<filter-mapping>
		<filter-name>cloudMailInAuthFilter</filter-name>
		<url-pattern>/repo/v1/cloudMailInMessage/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>cloudMailInContentTypeFilter</filter-name>
		<url-pattern>/repo/v1/cloudMailInMessage/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>cloudMailInAcceptPlainTextFilter</filter-name>
		<url-pattern>/repo/v1/cloudMailInMessage/*</url-pattern>
		<url-pattern>/repo/v1/cloudMailInAuthorization/*</url-pattern>
	</filter-mapping>
	
	<filter>
		<filter-name>oauthClientAuthFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<!-- Make sure the init-params are passed through the proxy to the bean -->
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>oauthClientAuthFilter</filter-name>
		<url-pattern>/auth/v1/oauth2/token</url-pattern>
		<url-pattern>/auth/v1/oauth2/token/*</url-pattern>
		<url-pattern>/auth/v1/oauth2/revoke</url-pattern>
	</filter-mapping>
	
	<!-- appends a new sessionId cookie to the response if the user did not provide one in their request -->
	<filter>
		<filter-name>sessionIdCookieSetterFilter</filter-name>
		<filter-class>org.sagebionetworks.repo.web.filter.SessionIdCookieSetterFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>sessionIdCookieSetterFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
</web-app>
