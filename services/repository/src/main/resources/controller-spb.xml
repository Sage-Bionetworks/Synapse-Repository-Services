<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- Turn on Spring's autoproxy using AspectJ's @Aspect annotations. -->
	<aop:aspectj-autoproxy />

	<import resource="classpath:search-dao.spb.xml" />
	<import resource="classpath:managers-spb.xml" />
	<import resource="classpath:cloudwatch-spb.xml" />
	<import resource="classpath:repo-log-sweep-spb.xml" />

	<!-- Make sure we can watch for deadlock on all methods of the Generic Entity 
		Controller -->
	<bean id="deadlockWatcher" class="org.sagebionetworks.repo.web.DeadlockWatcher" />

	<!-- The Service Provider -->
	<bean id="serviceProider" class="org.sagebionetworks.repo.web.service.ServiceProviderImpl" />
	
	<!-- Search Service -->
	<bean id="searchService"
		class="org.sagebionetworks.repo.web.service.SearchServiceImpl" />

	<!-- The AccessApproval Service -->
	<bean id="accessApprovalService"
		class="org.sagebionetworks.repo.web.service.AccessApprovalServiceImpl" />

	<!-- The AccessRequirement Service -->
	<bean id="accessRequirementService"
		class="org.sagebionetworks.repo.web.service.AccessRequirementServiceImpl" />

	<!-- The Administration Service -->
	<bean id="administrationService"
		class="org.sagebionetworks.repo.web.service.AdministrationServiceImpl" />

	<!-- The Concept Service -->
	<bean id="conceptService" class="org.sagebionetworks.repo.web.service.ConceptServiceImpl" />

	<!-- The Entity Service -->
	<bean id="entityService" class="org.sagebionetworks.repo.web.service.EntityServiceImpl" />

	<!-- The Node Query Service -->
	<bean id="nodeQueryService" class="org.sagebionetworks.repo.web.service.NodeQueryServiceImpl" />

	<!-- The S3Token Service -->
	<bean id="s3TokenService" class="org.sagebionetworks.repo.web.service.S3TokenServiceImpl" />
	
	<!-- The Messaging Service -->
	<bean id="messageService" class="org.sagebionetworks.repo.web.service.MessageServiceImpl" />

	<!-- The StorageUsage Service -->
	<bean id="storageUsageService" class="org.sagebionetworks.repo.web.service.StorageUsageServiceImpl" />
	
	<!--Migration related beans  -->
	<bean id="migrationService" class="org.sagebionetworks.repo.web.service.MigrationServiceImpl" />

	<!-- The TrashService -->
	<bean id="trashService"
		class="org.sagebionetworks.repo.web.service.TrashServiceImpl" />

	<!-- Translator between WikiPages and V2 WikiPages -->
	<bean id="wikiModelTranslationHelper" class="org.sagebionetworks.repo.web.WikiModelTranslationHelper" />
	
	<!-- The Wiki Service -->
	<bean id="wikiService" class="org.sagebionetworks.repo.web.service.WikiServiceImpl" depends-on="wikiModelTranslationHelper"/>

	<bean id="tableServices" class="org.sagebionetworks.repo.web.service.table.TableServicesImpl" />

	<!-- The V2 Wiki Service -->
	<bean id="v2WikiService" class="org.sagebionetworks.repo.web.service.V2WikiServiceImpl" depends-on="wikiModelTranslationHelper"/>
	
	<!-- The UserProfile Service -->
	<bean id="userProfileService"
		class="org.sagebionetworks.repo.web.service.UserProfileServiceImpl" />

	<!-- The UserGroup Service -->
	<bean id="userGroupService"
		class="org.sagebionetworks.repo.web.service.UserGroupServiceImpl" />

	<!-- The EntityBundle Service -->
	<bean id="entityBundleService"
		class="org.sagebionetworks.repo.web.service.EntityBundleServiceImpl" />

	<!-- The Activity Service -->
	<bean id="activityService"
		class="org.sagebionetworks.repo.web.service.ActivityServiceImpl" />

	<!-- The NodeLineageQuery Service -->
	<bean id="nodeTreeQueryService"
		class="org.sagebionetworks.repo.web.service.NodeTreeQueryServiceImpl" />
		
	<!-- The Evaluation Service -->
	<bean id="evaluationService"
		class="org.sagebionetworks.repo.web.service.EvaluationServiceImpl" />

	<!-- The DOI Service -->
	<bean id="doiService" class="org.sagebionetworks.repo.web.service.DoiServiceImpl" />
	
	<!-- The temporary Wiki Migration Service -->
	<bean id="wikiMigrationService" class="org.sagebionetworks.repo.web.service.WikiMigrationService" />

	<bean id="teamService" class="org.sagebionetworks.repo.web.service.TeamServiceImpl" />
	<bean id="membershipInvitationService" class="org.sagebionetworks.repo.web.service.MembershipInvitationServiceImpl" />
	<bean id="membershipRequestService" class="org.sagebionetworks.repo.web.service.MembershipRequestServiceImpl" />
		
		<!-- The Location helper -->
	<bean id="locationHelper" class="org.sagebionetworks.repo.util.LocationHelpersImpl" />

	<bean id="referenceUtil" class="org.sagebionetworks.repo.util.ReferenceUtilImpl" />

	<!-- Provides validation for all types -->
	<bean id="allTypesValidator"
		class="org.sagebionetworks.repo.web.controller.metadata.AllTypesValidatorImpl"
		scope="singleton" />

	<bean id="datasetMetadataProvider"
		class="org.sagebionetworks.repo.web.controller.metadata.DatasetMetadataProvider"
		scope="singleton" />
	<bean id="inputDataLayerProvider"
		class="org.sagebionetworks.repo.web.controller.metadata.LayerMetadataProvider"
		scope="singleton" />
	<bean id="projectMetadataProvider"
		class="org.sagebionetworks.repo.web.controller.metadata.ProjectMetadataProvider"
		scope="singleton" />
	<bean id="storedLayerPreviewMetadataProvider"
		class="org.sagebionetworks.repo.web.controller.metadata.PreviewMetadataProvider"
		scope="singleton" />
	<bean id="folderMetadataProvider"
		class="org.sagebionetworks.repo.web.controller.metadata.FolderMetadataProvider"
		scope="singleton" />
	<bean id="analysisMetadataProvider"
		class="org.sagebionetworks.repo.web.controller.metadata.AnalysisMetadataProvider"
		scope="singleton" />
	<bean id="stepMetadataProvider"
		class="org.sagebionetworks.repo.web.controller.metadata.StepMetadataProvider"
		scope="singleton" />
	<bean id="codeMetadataProvider"
		class="org.sagebionetworks.repo.web.controller.metadata.CodeMetadataProvider"
		scope="singleton" />
	<bean id="locationableMetadataProvider"
		class="org.sagebionetworks.repo.web.controller.metadata.LocationableMetadataProvider"
		scope="singleton" />
	<bean id="tableEntityMetadataProvider"
		class="org.sagebionetworks.repo.web.controller.metadata.TableEntityMetadataProvider"
		scope="singleton" />
	<bean id="communityMetadataProvider"
		class="org.sagebionetworks.bridge.controller.metadata.CommunityMetadataProvider"
		scope="singleton" />

	<!-- the keys in this map must be the values of the org.sagebionetworks.repo.modelObjectType 
		enum -->
	<bean id="metadataProviderFactory"
		class="org.sagebionetworks.repo.web.controller.metadata.MetadataProviderFactoryImpl"
		scope="singleton">
		<property name="metadataProviderMap">
			<map>
				<entry key="dataset">
					<ref bean="datasetMetadataProvider" />
				</entry>
				<entry key="layer">
					<ref bean="inputDataLayerProvider" />
				</entry>
				<entry key="project">
					<ref bean="projectMetadataProvider" />
				</entry>
				<entry key="preview">
					<ref bean="storedLayerPreviewMetadataProvider" />
				</entry>
				<entry key="folder">
					<ref bean="folderMetadataProvider" />
				</entry>
				<entry key="analysis">
					<ref bean="analysisMetadataProvider" />
				</entry>
				<entry key="step">
					<ref bean="stepMetadataProvider" />
				</entry>
				<entry key="code">
					<ref bean="codeMetadataProvider" />
				</entry>
				<entry key="locationable">
					<ref bean="locationableMetadataProvider" />
				</entry>
				<entry key="file">
					<bean class= "org.sagebionetworks.repo.web.controller.metadata.FileEntityMetadataProvider"/> 
				</entry>
				<entry key="table">
					<ref bean="tableEntityMetadataProvider"/>
				</entry>
				<entry key="community">
					<ref bean="communityMetadataProvider"/>
				</entry>
			</map>
		</property>
	</bean>

	<!-- controllerProfiler that collects latency information in the form of CloudWatch objects -->
	<bean id="controllerProfiler" class="org.sagebionetworks.cloudwatch.ControllerProfiler">
		<property name="shouldProfile" ref="stackConfiguration.cloudWatchOnOff" />
	</bean>

	<!-- A profiler that logs performance data for all bean method calls. -->
	<bean id="profiler" class="org.sagebionetworks.profiler.Profiler">
		<property name="handlers">
			<list>
				<bean name="loggingProfiler" class="org.sagebionetworks.profiler.LoggingProfiler" />
				<bean name="perThreadProfiler" class="org.sagebionetworks.profiler.PerThreadHandler" />
			</list>
		</property>
	</bean>

	<bean id="refreshUserGroupCache" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="userProfileService" />
		<property name="targetMethod" value="refreshCache" />		
	    <property name="concurrent" value="false" />
	</bean>

	<bean id="refreshUserGroupCacheTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
	    <property name="jobDetail" ref="refreshUserGroupCache" />
	    <!-- build cache immediately -->
    	<property name="startDelay" value="0" />
	    <!-- repeat every 5 minutes -->
	    <property name="repeatInterval" value="300000" />
	    <property name="misfireInstructionName" value="MISFIRE_INSTRUCTION_FIRE_NOW" />
	</bean>
	
	<bean id="refreshTeamMemberCache" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="teamService" />
		<property name="targetMethod" value="refreshCache" />		
	    <property name="concurrent" value="false" />
	</bean>

	<bean id="refreshTeamMemberCacheTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
	    <property name="jobDetail" ref="refreshTeamMemberCache" />
	    <!-- build cache immediately -->
    	<property name="startDelay" value="0" />
	    <!-- repeat every 5 minutes -->
	    <property name="repeatInterval" value="300000" />
	    <property name="misfireInstructionName" value="MISFIRE_INSTRUCTION_FIRE_NOW" />
	</bean>
	
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	    <property name="triggers">
	        <list>
	            <ref bean="refreshUserGroupCacheTrigger" />
	            <ref bean="refreshTeamMemberCacheTrigger" />
	           	<ref bean="repoLogSweeperTrigger" />
	        </list>
	    </property>
    </bean>

</beans>
