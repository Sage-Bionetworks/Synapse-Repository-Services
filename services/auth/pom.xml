<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.sagebionetworks</groupId>
		<artifactId>services</artifactId>
		<version>1.0.1</version>
	</parent>

	<groupId>org.sagebionetworks</groupId>
	<artifactId>services-authentication</artifactId>
	<packaging>war</packaging>
	<name>Platform Authentication Service</name>

	<dependencies>

		<dependency>
			<groupId>org.sagebionetworks</groupId>
			<artifactId>auth-util</artifactId>
		</dependency>

		<dependency>
			<groupId>org.sagebionetworks</groupId>
			<artifactId>lib-securityUtilities</artifactId>
		</dependency>

		<!-- ATOM -->
		<dependency>
			<groupId>rome</groupId>
			<artifactId>rome</artifactId>
			<version>0.5</version>
		</dependency>

		<!-- Spring Framework dependencies -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.spring-library</artifactId>
			<type>libd</type>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
		</dependency>


		<!-- This was being pulled in as a child dependency of the springframework
			but the tomcat plugin needs this to be in scope "provided" -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>com.springsource.javax.servlet</artifactId>
			<version>2.5.0</version>
			<scope>provided</scope>
		</dependency>

		<!-- In a tomcat container, such as Elastic Beanstalk, you have to include
			jstl.jar manually, hence this entry. -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>


		<!-- Jackson JSON Mapper -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
		</dependency>

		<!-- Logging dependencies -->
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
		</dependency>

		<dependency>
			<groupId>org.openid4java</groupId>
			<artifactId>openid4java-consumer</artifactId>
			<version>0.9.6</version>
			<type>pom</type>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>

	    <dependency>
          <groupId>org.apache.httpcomponents</groupId>
          <artifactId>httpclient</artifactId>
          <version>4.1.1</version>
        </dependency>

	</dependencies>


	<build>
		<plugins>
			<!-- Make a WAR file -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<webResources>
						<resource>
							<directory>src/main/webapp</directory>
							<filtering>true</filtering>
						</resource>
					</webResources>
				</configuration>
			</plugin>

			<!-- This allows us to run the servlet container from maven via mvn tomcat:run
				or deploy to a local tomcat via tomcat:deploy -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>tomcat-maven-plugin</artifactId>
				<configuration>
					<!-- Deploy this as the root application -->
					<path>/</path>
				</configuration>
			</plugin>

			<!-- Upload application to the appspot automatically, during release:perform -->
			<!-- plugin> <artifactId>maven-release-plugin</artifactId> <configuration>
				<goals>gae:deploy</goals> </configuration> </plugin -->

			<!-- Added this path to the test classpath so that we do not need to copy
				and paste our servlet config into a separate file even though we want the
				exact same config for testing -->
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<additionalClasspathElements>
						<element>${project.basedir}/src/main/webapp/WEB-INF/</element>
					</additionalClasspathElements>
				</configuration>
			</plugin>

		</plugins>
	</build>

	<!-- Specify hard-coded project properties here -->
	<properties>
		<!-- Upload to http://test.latest.<applicationName>.appspot.com by default -->
		<gae.application.version>test</gae.application.version>
		<gae.version>1.3.7</gae.version>
		<org.springframework.version>3.0.5.RELEASE</org.springframework.version>
	</properties>

	<profiles>
		<!-- We can configure our integration server to activate this profile and
			perform gae:deploy, thus uploading latest snapshot to the http://1.latest.<applicationName>.appspot.com
			automatically -->
		<profile>
			<id>integration-build</id>
			<properties>
				<gae.application.version>stage</gae.application.version>
			</properties>
		</profile>

		<!-- This profile will activate automatically during release and upload
			application to the http://2.latest.<applicationName>.appspot.com (We might
			want to set the 2nd version as our applications Default version to be accessible
			at http://<applicationName>.appspot.com) -->
		<profile>
			<id>release-build</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>

			<properties>
				<!-- During release, set application version in appengine-web.xml to
					2 -->
				<gae.application.version>release</gae.application.version>
			</properties>
		</profile>
	</profiles>

</project>
