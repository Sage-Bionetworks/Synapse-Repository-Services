<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<context:annotation-config />

	<import resource="classpath:main-scheduler-spb.xml" />

	<bean id="queueCleaner"
		class="org.sagebionetworks.workers.util.aws.message.QueueCleaner">
		<constructor-arg ref="awsSQSClient" />
	</bean>

	<!-- We don't want to send emails during testing, so we stub out Amazon SES -->
	<bean id="amazonSESClient" class="org.sagebionetworks.repo.manager.StubAmazonSimpleEmailServiceClient" />
	
	<bean id="asynchronousJobWorkerHelper" class="org.sagebionetworks.AsynchronousJobWorkerHelperImpl"/>
	
	<!--  During integration tests we do not want to scan partitions -->
	<bean id="athenaPartitionScannerWorker" class="org.sagebionetworks.athena.workers.AthenaPartitionScannerWorkerStub" />
	
	<!-- During the integration tests we do not want to run the status watcher worker -->
	<bean id="statisticsMonthlyStatusWatcherWorker" class="org.sagebionetworks.statistics.workers.StatisticsMonthlyStatusWatcherWorkerStub"></bean>

	<bean id="testHelper" class="org.sagebionetworks.worker.TestHelper"/>
	
	<!-- Profile with a subset of workers for views (Use with @ActiveProfiles("test-view-workers") -->
	<beans profile="test-view-workers">
		<util:list id="workerTriggersList">
			<ref bean="tableTransactionMessageTrigger" />
			<ref bean="tableQueryQueueMessageReveiverTrigger" />
			<ref bean="tableQueryNextPageQueueMessageReveiverTrigger" />
			<!-- workers publish messages too -->
			<ref bean="messagePublisherTrigger" />
			<ref bean="tableViewWorkerTrigger" />
			<ref bean="objectReplicationWorkerTrigger" />
			<ref bean="objectReplicationReconciliationWorkerTrigger" />
		</util:list>
	</beans>
	
	<!-- Profile with a subset of workers for replication only (Use with @ActiveProfiles("test-replication-workers") -->
	<beans profile="test-replication-workers">
		<util:list id="workerTriggersList">
			<!-- workers publish messages too -->
			<ref bean="messagePublisherTrigger" />
			<ref bean="objectReplicationWorkerTrigger" />
		</util:list>
	</beans>
	
	<!-- Profile with a subset of workers for reconciliation only (Use with @ActiveProfiles("test-reconciliation-workers") -->
	<beans profile="test-reconciliation-workers">
		<util:list id="workerTriggersList">
			<!-- workers publish messages too -->
			<ref bean="messagePublisherTrigger" />
			<ref bean="tableViewWorkerTrigger" />
			<ref bean="objectReplicationWorkerTrigger" />
			<ref bean="objectReplicationReconciliationWorkerTrigger" />
		</util:list>
	</beans>
	
	<!-- Profile with a subset of workers for ViewColumnModelRequestWorkerTrigger only (Use with @ActiveProfiles("test-view-column-model-request-worker") -->
	<beans profile="test-view-column-model-request-worker">
		<util:list id="workerTriggersList">
			<ref bean="messagePublisherTrigger" />
			<ref bean="objectReplicationWorkerTrigger" />
			<ref bean="viewColumnModelRequestWorkerTrigger" />
		</util:list>
	</beans>
</beans>
