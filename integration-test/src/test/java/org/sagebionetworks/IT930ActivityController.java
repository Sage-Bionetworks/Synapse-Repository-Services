package org.sagebionetworks;


import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.sagebionetworks.client.exceptions.SynapseException;
import org.sagebionetworks.reflection.model.PaginatedResults;
import org.sagebionetworks.repo.model.Project;
import org.sagebionetworks.repo.model.Reference;
import org.sagebionetworks.repo.model.provenance.Activity;

public class IT930ActivityController extends BaseITTest {

	private List<String> entitiesToDelete;
	private List<String> activitiesToDelete;
	
	@BeforeEach
	public void before() throws SynapseException {
		adminSynapse.clearAllLocks();
		entitiesToDelete = new ArrayList<String>();
		activitiesToDelete = new ArrayList<String>();
	}
	
	@AfterEach
	public void after() throws Exception {
		for(String id : entitiesToDelete) {
			synapse.deleteEntityById(id);
		}
		// We do not delete the activity as the node will be in the trashcan
	}

	@Test
	public void testActivityCrud() throws Exception {
		// create
		Activity act = new Activity();
		act = synapse.createActivity(act);
		activitiesToDelete.add(act.getId());
		assertNotNull(act);
		
		// update
		String newname = "updated";
		act.setName(newname);
		act = synapse.putActivity(act);
		assertEquals(newname, act.getName());
		
		// set generated by
		Project entity = new Project();
		entity = synapse.createEntity(entity, act.getId());
		entitiesToDelete.add(entity.getId());
		assertEquals(act.getId(), synapse.getActivityForEntity(entity.getId()).getId());
		
		// version
		assertEquals(act.getId(), synapse.getActivityForEntityVersion(entity.getId(), 1L).getId());
		
		// generated
		PaginatedResults<Reference> refs = synapse.getEntitiesGeneratedBy(act.getId(), Integer.MAX_VALUE, 0);
		assertEquals(1, refs.getTotalNumberOfResults());
		Reference ref = refs.getResults().get(0);
		assertEquals(entity.getId(), ref.getTargetId());
		assertEquals(new Long(1), ref.getTargetVersionNumber());
			
	}

}
