package org.sagebionetworks;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.sagebionetworks.client.Synapse;
import org.sagebionetworks.client.exceptions.SynapseException;
import org.sagebionetworks.client.exceptions.SynapseNotFoundException;
import org.sagebionetworks.repo.model.PaginatedResults;
import org.sagebionetworks.repo.model.Project;
import org.sagebionetworks.repo.model.Reference;
import org.sagebionetworks.repo.model.provenance.Activity;

public class IT930ActivityController {
	private static final Logger log = Logger.getLogger(IT930ActivityController.class.getName());
	
	private static Synapse synapse = null;

	List<String> entitiesToDelete;
	List<String> activitiesToDelete;

	private static Synapse createSynapseClient(String user, String pw) throws SynapseException {
		Synapse synapse = new Synapse();
		synapse.setAuthEndpoint(StackConfiguration
				.getAuthenticationServicePrivateEndpoint());
		synapse.setRepositoryEndpoint(StackConfiguration
				.getRepositoryServiceEndpoint());
		synapse.setFileEndpoint(StackConfiguration.getFileServiceEndpoint());
		synapse.login(user, pw);
		
		return synapse;
	}
	
	/**
	 * @throws Exception
	 * 
	 */
	@BeforeClass
	public static void beforeClass() throws Exception {
		synapse = createSynapseClient(StackConfiguration.getIntegrationTestUserOneName(),
				StackConfiguration.getIntegrationTestUserOnePassword());
	}
	
	@Before
	public void before() {
		entitiesToDelete = new ArrayList<String>();
		activitiesToDelete = new ArrayList<String>();
	}
	
	@After
	public void after() throws Exception {
		for(String id : entitiesToDelete) {
			synapse.deleteAndPurgeEntityById(id);
		}
		for(String id : activitiesToDelete) {
			synapse.deleteActivity(id);
		}
	}
		
	@Test 
	public void testActivityCrud() throws Exception {
		// create
		Activity act = new Activity();
		act = synapse.createActivity(act);
		activitiesToDelete.add(act.getId());
		assertNotNull(act);
		
		// update
		String newname = "updated";
		act.setName(newname);
		act = synapse.putActivity(act);
		assertEquals(newname, act.getName());
		
		// set generated by
		Project entity = new Project();
		entity.setEntityType(Project.class.getName());
		entity = synapse.createEntity(entity, act.getId());
		entitiesToDelete.add(entity.getId());
		assertEquals(act.getId(), synapse.getActivityForEntity(entity.getId()).getId());
		
		// version
		assertEquals(act.getId(), synapse.getActivityForEntityVersion(entity.getId(), 1L).getId());
		
		// generated
		PaginatedResults<Reference> refs = synapse.getEntitiesGeneratedBy(act.getId(), Integer.MAX_VALUE, 0);
		assertEquals(1, refs.getTotalNumberOfResults());
		Reference ref = refs.getResults().get(0);
		assertEquals(entity.getId(), ref.getTargetId());
		assertEquals(new Long(1), ref.getTargetVersionNumber());
		
		// delete activity
		synapse.deleteActivity(act.getId());
		try {
			synapse.getActivity(act.getId());
			fail();
		} catch (SynapseNotFoundException e) {
			//good
		}		
	}

}
